{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport authService from '../services/AuthService';\nexport default {\n  name: 'register',\n  data: function data() {\n    return {\n      user: {\n        username: '',\n        password: '',\n        confirmPassword: '',\n        role: 'user'\n      },\n      registrationErrors: false,\n      registrationErrorMsg: 'There were problems registering this user.'\n    };\n  },\n  methods: {\n    register: function register() {\n      var _this = this;\n      if (this.user.password != this.user.confirmPassword) {\n        this.registrationErrors = true;\n        this.registrationErrorMsg = 'Password & Confirm Password do not match.';\n      } else {\n        authService.register(this.user).then(function (response) {\n          if (response.status == 201) {\n            _this.$router.push({\n              path: '/login',\n              query: {\n                registration: 'success'\n              }\n            });\n          }\n        })[\"catch\"](function (error) {\n          var response = error.response;\n          _this.registrationErrors = true;\n          if (response.status === 400) {\n            _this.registrationErrorMsg = 'Bad Request: Validation Errors';\n          }\n        });\n      }\n    },\n    clearErrors: function clearErrors() {\n      this.registrationErrors = false;\n      this.registrationErrorMsg = 'There were problems registering this user.';\n    }\n  }\n};","map":{"version":3,"mappings":";AA0BA;AAEA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MAAA;MACA;QACA;QACA;MACA;QACAC,YACAD,oBACAE;UACA;YACA;cACAC;cACAC;gBAAAC;cAAA;YACA;UACA;QACA,WACA;UACA;UACA;UACA;YACA;UACA;QACA;MACA;IACA;IACAC;MACA;MACA;IACA;EACA;AACA","names":["name","data","user","username","password","confirmPassword","role","registrationErrors","registrationErrorMsg","methods","register","authService","then","path","query","registration","clearErrors"],"sourceRoot":"src/views","sources":["Register.vue"],"sourcesContent":["<template>\r\n  <div id=\"register\" class=\"text-center\">\r\n    <form @submit.prevent=\"register\">\r\n      <h1>Create Account</h1>\r\n      <div role=\"alert\" v-if=\"registrationErrors\">\r\n        {{ registrationErrorMsg }}\r\n      </div>\r\n      <div class=\"form-input-group\">\r\n        <label for=\"username\">Username:</label>\r\n        <input type=\"text\" id=\"username\" v-model=\"user.username\" required autofocus />\r\n      </div>\r\n      <div class=\"form-input-group\">\r\n        <label for=\"password\">Password:</label>\r\n        <input type=\"password\" id=\"password\" v-model=\"user.password\" required />\r\n      </div>\r\n      <div class=\"form-input-group\">\r\n        <label for=\"confirmPassword\">Confirm Password:</label>\r\n        <input type=\"password\" id=\"confirmPassword\" v-model=\"user.confirmPassword\" required />\r\n      </div>\r\n      <button class=\"btn\" type=\"submit\">Create Account</button>\r\n      <p><router-link :to=\"{ name: 'login' }\">Already have an account? Log in.</router-link></p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport authService from '../services/AuthService';\r\n\r\nexport default {\r\n  name: 'register',\r\n  data() {\r\n    return {\r\n      user: {\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        role: 'user',\r\n      },\r\n      registrationErrors: false,\r\n      registrationErrorMsg: 'There were problems registering this user.',\r\n    };\r\n  },\r\n  methods: {\r\n    register() {\r\n      if (this.user.password != this.user.confirmPassword) {\r\n        this.registrationErrors = true;\r\n        this.registrationErrorMsg = 'Password & Confirm Password do not match.';\r\n      } else {\r\n        authService\r\n          .register(this.user)\r\n          .then((response) => {\r\n            if (response.status == 201) {\r\n              this.$router.push({\r\n                path: '/login',\r\n                query: { registration: 'success' },\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            const response = error.response;\r\n            this.registrationErrors = true;\r\n            if (response.status === 400) {\r\n              this.registrationErrorMsg = 'Bad Request: Validation Errors';\r\n            }\r\n          });\r\n      }\r\n    },\r\n    clearErrors() {\r\n      this.registrationErrors = false;\r\n      this.registrationErrorMsg = 'There were problems registering this user.';\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.form-input-group {\r\n  margin-bottom: 1rem;\r\n}\r\nlabel {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n#register {\r\n  width: 100%;\r\n  height: 80vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: fle;\r\n  align-items: center;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}