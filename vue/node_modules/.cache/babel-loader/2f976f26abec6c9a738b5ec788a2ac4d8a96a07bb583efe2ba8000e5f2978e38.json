{"ast":null,"code":"import _regeneratorRuntime from \"E:/workspace/walk-cle-final-capstone-starter/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/workspace/walk-cle-final-capstone-starter/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport PlacesService from '../services/PlacesService.js';\nimport PlaceCard from '../components/PlaceCard.vue';\nexport default {\n  components: {\n    PlaceCard: PlaceCard\n  },\n  data: function data() {\n    return {\n      places: [],\n      clevelandPlaces: []\n    };\n  },\n  created: function created() {\n    var _this = this;\n    // Define an array of specific place IDs you want to include\n    var specificPlaceIds = [\"place_id_1\", \"place_id_2\", \"place_id_3\"];\n    PlacesService.getNearbyPlaces().then(function (response) {\n      _this.places = response.data;\n\n      // Filter places to include only those with specific place IDs\n      var filteredPlaces = _this.places.results.filter(function (place) {\n        return specificPlaceIds.includes(place.place_id);\n      });\n\n      // Initialize an array to store the detailed information for specific places\n      var detailedPlaces = [];\n\n      // Fetch additional data for each specific place\n      filteredPlaces.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(place) {\n          var additionalData;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return PlacesService.getPlaceDetails(place.place_id);\n                case 2:\n                  additionalData = _context.sent;\n                  detailedPlaces.push(additionalData.data);\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n\n      // Now, detailedPlaces contains the additional data for the specific places\n      console.log(detailedPlaces);\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;;AAUA;AACA;AAEA;EACAA;IACAC;EACA;EACAC;IACA;MACAC;MACAC;IACA;EACA;EACAC;IAAA;IACA;IACA;IAEAC;MACA;;MAEA;MACA;QACA;MACA;;MAEA;MACA;;MAEA;MACAC;QAAA;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA;kBAAA,OACAD;gBAAA;kBAAAE;kBACAC;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CACA;QAAA;UAAA;QAAA;MAAA;;MAEA;MACAC;IACA;EACA;AACA","names":["components","PlaceCard","data","places","clevelandPlaces","created","PlacesService","filteredPlaces","additionalData","detailedPlaces","console"],"sourceRoot":"src/components","sources":["PlacesList.vue"],"sourcesContent":["<template>\r\n    <div class=\"places-list\">\r\n        <PlaceCard v-for=\"place in places\" :key=\"place.place_id\" :place=\"place\" />\r\n        {{ places.results[0].place_id }}\r\n\r\n        <!-- Ask Andy about our custom array -->\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport PlacesService from '../services/PlacesService.js';\r\nimport PlaceCard from '../components/PlaceCard.vue';\r\n\r\nexport default {\r\n    components: {\r\n        PlaceCard\r\n    },\r\n    data() {\r\n        return {\r\n            places: [],\r\n            clevelandPlaces: [],\r\n        }\r\n    },\r\n    created() {\r\n    // Define an array of specific place IDs you want to include\r\n    const specificPlaceIds = [\"place_id_1\", \"place_id_2\", \"place_id_3\"];\r\n\r\n    PlacesService.getNearbyPlaces().then((response) => {\r\n        this.places = response.data;\r\n\r\n        // Filter places to include only those with specific place IDs\r\n        const filteredPlaces = this.places.results.filter(place => {\r\n            return specificPlaceIds.includes(place.place_id);\r\n        });\r\n\r\n        // Initialize an array to store the detailed information for specific places\r\n        const detailedPlaces = [];\r\n\r\n        // Fetch additional data for each specific place\r\n        filteredPlaces.forEach(async (place) => {\r\n            const additionalData = await PlacesService.getPlaceDetails(place.place_id);\r\n            detailedPlaces.push(additionalData.data);\r\n        });\r\n\r\n        // Now, detailedPlaces contains the additional data for the specific places\r\n        console.log(detailedPlaces);\r\n    });\r\n}\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.places-list {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}