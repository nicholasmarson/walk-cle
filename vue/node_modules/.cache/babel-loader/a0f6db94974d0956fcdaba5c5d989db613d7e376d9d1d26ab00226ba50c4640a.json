{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport mapboxgl from \"mapbox-gl\";\nexport default {\n  data: function data() {\n    return {\n      map: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    mapboxgl.accessToken = \"pk.eyJ1Ijoid2Fsa2NsZTIxNiIsImEiOiJjbG16MGVvdWkxM2QzMm9wNjNobm9hZGQyIn0.5r382ZeMc0zOhHpiAd9D2A\";\n\n    // Declare latitude and longitude variables\n    var latitude, longitude;\n\n    // Initialize the map at the user's location\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        latitude = position.coords.latitude;\n        longitude = position.coords.longitude;\n        _this.map = new mapboxgl.Map({\n          container: \"map\",\n          style: \"mapbox://styles/mapbox/streets-v12\",\n          center: [longitude, latitude],\n          // Center the map at the user's location\n          zoom: 15 // Set an initial zoom level\n        });\n\n        // Add map controls, markers, and other customizations here\n        _this.map.dragPan.enable();\n\n        // Add GeolocateControl\n        var geolocate = new mapboxgl.GeolocateControl({\n          positionOptions: {\n            enableHighAccuracy: true\n          },\n          trackUserLocation: true,\n          showUserLocation: true\n        });\n\n        // Add the GeolocateControl to the map\n        _this.map.addControl(geolocate);\n\n        // Event listener for geolocation update\n        _this.map.on(\"load\", function () {\n          geolocate.on(\"geolocate\", function (event) {\n            var coords = event.coords;\n            latitude = coords.latitude;\n            longitude = coords.longitude;\n\n            // Update the map's center to the user's location\n            _this.map.setCenter([longitude, latitude]);\n          });\n        });\n\n        // Add a marker for the user's location\n        new mapboxgl.Marker().setLngLat([longitude, latitude]).addTo(_this.map);\n      }, function (error) {\n        if (error.code === error.PERMISSION_DENIED) {\n          alert(\"You denied the request for geolocation. Please enable location services in your browser settings.\");\n        } else {\n          alert(\"Geolocation error: \".concat(error.message));\n        }\n      });\n    } else {\n      alert(\"Geolocation is not available in your browser.\");\n    }\n  },\n  methods: {\n    getUserLocation: function getUserLocation() {\n      var _this2 = this;\n      if (\"geolocation\" in navigator) {\n        // Ask for user's permission\n        navigator.geolocation.getCurrentPosition(function (position) {\n          var _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude;\n\n          // Update the map's center to the user's location\n          _this2.map.setCenter([longitude, latitude]);\n          _this2.map.setZoom(15);\n          _this2.map.setMarker([longitude, latitude]);\n        }, function (error) {\n          if (error.code === error.PERMISSION_DENIED) {\n            alert(\"You denied the request for geolocation. Please enable location services in your browser settings.\");\n          } else {\n            alert(\"Geolocation error: \".concat(error.message));\n          }\n        });\n      } else {\n        alert(\"Geolocation is not available in your browser.\");\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAQA;AAEA;EACAA;IACA;MACAC;IACA;EACA;EACAC;IAAA;IACAC,uBACA;;IAEA;IACA;;IAEA;IACA;MACAC,yCACA;QACAC;QACAC;QAEA;UACAC;UACAC;UACAC;UAAA;UACAC;QACA;;QAEA;QACA;;QAEA;QACA;UACAC;YACAC;UACA;UACAC;UACAC;QACA;;QAEA;QACA;;QAEA;QACA;UACAC;YACA;YACAV;YACAC;;YAEA;YACA;UACA;QACA;;QAEA;QACA,sBACAU,iCACAC;MACA,GACA;QACA;UACAC,MACA,oGACA;QACA;UACAA;QACA;MACA,EACA;IACA;MACAA;IACA;EACA;EACAC;IACAC;MAAA;MACA;QACA;QACAhB,yCACA;UACA;YAAAC;YAAAC;;UAEA;UACA;UACA;UACA;QACA,GACA;UACA;YACAY,MACA,oGACA;UACA;YACAA;UACA;QACA,EACA;MACA;QACAA;MACA;IACA;EACA;AACA","names":["data","map","mounted","mapboxgl","navigator","latitude","longitude","container","style","center","zoom","positionOptions","enableHighAccuracy","trackUserLocation","showUserLocation","geolocate","setLngLat","addTo","alert","methods","getUserLocation"],"sourceRoot":"src/components","sources":["startingMapView.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <button @click=\"getUserLocation\">Get My Location</button>\r\n    <div id=\"map\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mapboxgl from \"mapbox-gl\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    mapboxgl.accessToken =\r\n      \"pk.eyJ1Ijoid2Fsa2NsZTIxNiIsImEiOiJjbG16MGVvdWkxM2QzMm9wNjNobm9hZGQyIn0.5r382ZeMc0zOhHpiAd9D2A\";\r\n\r\n    // Declare latitude and longitude variables\r\n    let latitude, longitude;\r\n\r\n    // Initialize the map at the user's location\r\n    if (\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          latitude = position.coords.latitude;\r\n          longitude = position.coords.longitude;\r\n\r\n          this.map = new mapboxgl.Map({\r\n            container: \"map\",\r\n            style: \"mapbox://styles/mapbox/streets-v12\",\r\n            center: [longitude, latitude], // Center the map at the user's location\r\n            zoom: 15, // Set an initial zoom level\r\n          });\r\n\r\n          // Add map controls, markers, and other customizations here\r\n          this.map.dragPan.enable();\r\n\r\n          // Add GeolocateControl\r\n          const geolocate = new mapboxgl.GeolocateControl({\r\n            positionOptions: {\r\n              enableHighAccuracy: true,\r\n            },\r\n            trackUserLocation: true,\r\n            showUserLocation: true,\r\n          });\r\n\r\n          // Add the GeolocateControl to the map\r\n          this.map.addControl(geolocate);\r\n\r\n          // Event listener for geolocation update\r\n          this.map.on(\"load\", () => {\r\n            geolocate.on(\"geolocate\", (event) => {\r\n              const { coords } = event;\r\n              latitude = coords.latitude;\r\n              longitude = coords.longitude;\r\n\r\n              // Update the map's center to the user's location\r\n              this.map.setCenter([longitude, latitude]);\r\n            });\r\n          });\r\n\r\n          // Add a marker for the user's location\r\n          new mapboxgl.Marker()\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(this.map);\r\n        },\r\n        (error) => {\r\n          if (error.code === error.PERMISSION_DENIED) {\r\n            alert(\r\n              \"You denied the request for geolocation. Please enable location services in your browser settings.\"\r\n            );\r\n          } else {\r\n            alert(`Geolocation error: ${error.message}`);\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      alert(\"Geolocation is not available in your browser.\");\r\n    }\r\n  },\r\n  methods: {\r\n    getUserLocation() {\r\n      if (\"geolocation\" in navigator) {\r\n        // Ask for user's permission\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n\r\n            // Update the map's center to the user's location\r\n            this.map.setCenter([longitude, latitude]);\r\n            this.map.setZoom(15);\r\n            this.map.setMarker([longitude, latitude]);\r\n          },\r\n          (error) => {\r\n            if (error.code === error.PERMISSION_DENIED) {\r\n              alert(\r\n                \"You denied the request for geolocation. Please enable location services in your browser settings.\"\r\n              );\r\n            } else {\r\n              alert(`Geolocation error: ${error.message}`);\r\n            }\r\n          }\r\n        );\r\n      } else {\r\n        alert(\"Geolocation is not available in your browser.\");\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.map-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 50vh;\r\n}\r\n\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}