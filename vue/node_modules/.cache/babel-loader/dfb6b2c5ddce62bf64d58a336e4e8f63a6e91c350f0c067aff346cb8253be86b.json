{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nexport default {\n  name: \"Map\",\n  data: function data() {\n    return {\n      map: null,\n      routeService: null,\n      routeRendererService: null,\n      currentInput: \"\",\n      roundTrip: true,\n      mapCenter: {\n        lat: 41.4752,\n        lng: -81.8002\n      },\n      locations: [\"15302 Arden Ave, Lakewood OH 44107\", \"12978 Emerson AVe, Lakewood OH 44107\"]\n    };\n  },\n  methods: {\n    // This function is called during load, but can also be called to reset the map\n    initMap: function initMap() {\n      this.map = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: this.mapCenter,\n        zoom: 14,\n        maxZoom: 20,\n        minZoom: 3,\n        streetViewControl: true,\n        mapTypeControl: true,\n        fullscreenControl: true,\n        zoomControl: true\n      });\n      infoWindow = new google.maps.InfoWindow();\n      var noPOIStyle = [{\n        featureType: \"poi\",\n        elementType: \"labels\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }];\n      this.map.setOptions({\n        styles: noPOIStyle\n      });\n    },\n    // This function is called to add a new location\n    addToList: function addToList() {\n      if (this.currentInput.trim().length === 0) {\n        window.alert(\"Location cannot be empty\");\n        return;\n      }\n      this.locations.push(this.currentInput);\n      this.currentInput = \"\";\n    },\n    // This function is called to remove a location\n    removeFromList: function removeFromList(index) {\n      if (this.locations.length == 2) {\n        window.alert(\"A start and end location must be present\");\n        return;\n      }\n      this.locations.splice(index, 1);\n    },\n    // This function calls the Google Maps API, renders the route\n    // and retrieves the directions\n    generateRoute: function generateRoute() {\n      var _this = this;\n      for (var i = 0; i < this.locations.length; i++) {\n        if (this.locations[i].trim().length === 0) {\n          window.alert(\"Location cannot be empty\");\n          return;\n        }\n      }\n      var panel = document.getElementById(\"panel\");\n      panel.innerHTML = \"\";\n      this.initMap();\n      this.routeService = new window.google.maps.DirectionsService();\n      this.routeRendererService = new window.google.maps.DirectionsRenderer();\n      this.routeRendererService.setMap(this.map);\n      this.routeRendererService.setPanel(panel);\n      var myWaypoints = [];\n\n      /*\r\n        The API expects a single waypoint to be an object like this:\r\n        \r\n        {\r\n          location: \"123 somewhere St...\",\r\n          stopover: true\r\n        }\r\n      */\n\n      for (var _i = 1; _i < this.locations.length - 1; _i++) {\n        myWaypoints.push({\n          location: this.locations[_i],\n          stopover: true\n        });\n      }\n      this.routeService.route({\n        origin: this.locations[0],\n        destination: this.locations[this.locations.length - 1],\n        waypoints: myWaypoints,\n        travelMode: window.google.maps.TravelMode.DRIVING,\n        avoidTolls: true,\n        optimizeWaypoints: true\n      }).then(function (result) {\n        _this.routeRendererService.setDirections(result);\n      })[\"catch\"](function (error) {\n        console.log(error + \"Could not generate route\");\n      });\n    },\n    addMarker: function addMarker(event) {\n      var marker = {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng()\n      };\n      console.log(marker);\n      this.markers.push({\n        position: marker\n      });\n      this.$refs.mmm.panTo(marker);\n      //this.center = marker;\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n    this.initMap();\n    this.yourPOIs.forEach(function (poi) {\n      var myLatLng = {\n        lat: poi.latitude,\n        lng: poi.longitude\n      };\n      var marker = _this2.maps.Marker({\n        position: myLatLng,\n        map: _this2.myMap,\n        title: poi.annotation\n        // you can also add data here with key names that are not in use like for example \"uuid: 1\" so you can access that data later on if you click on markers or iterate through them\n      });\n\n      marker.addListener('click', function () {\n        console.log(marker.uuid); // if you want to react on clicking on a marker\n      });\n\n      _this2.addedMarkers.push(marker);\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;AAkCA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QAAAC;QAAAC;MAAA;MACAC,YACA,sCACA;IAEA;EACA;EAEAC;IACA;IACAC;MACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MAIA,kBACA;QACAC;QACAC;QACAC;UAAAC;QAAA;MACA,EACA;MACA;QAAAC;MAAA;IACA;IAEA;IACAC;MACA;QACAC;QACA;MACA;MACA;MACA;IACA;IAEA;IACAC;MACA;QACAD;QACA;MACA;MAEA;IACA;IAEA;IACA;IACAE;MAAA;MACA;QACA;UACAF;UACA;QACA;MACA;MAEA;MACAG;MACA;MAEA;MACA;MAEA;MACA;MAEA;;MAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;MAEA;QACAC;UACAC;UACAC;QACA;MACA;MAEA,kBACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GACAC;QACA;MACA,WACA;QACAC;MACA;IACA;IACAC;MACA;QACApC;QACAC;MACA;MACAkC;MACA;QAAAE;MAAA;MACA;MACA;IACA;EACA;EACAC;IAAA;IACA;IACA;MACA;QAAAtC;QAAAC;MAAA;MACA;QACAoC;QACA3C;QACA6C;QACA;MACA;;MACAC;QACAL;MACA;;MACA;IACA;EAEA;AACA","names":["name","data","map","routeService","routeRendererService","currentInput","roundTrip","mapCenter","lat","lng","locations","methods","initMap","center","zoom","maxZoom","minZoom","streetViewControl","mapTypeControl","fullscreenControl","zoomControl","infoWindow","featureType","elementType","stylers","visibility","styles","addToList","window","removeFromList","generateRoute","panel","myWaypoints","location","stopover","route","origin","destination","waypoints","travelMode","avoidTolls","optimizeWaypoints","then","console","addMarker","position","mounted","title","marker"],"sourceRoot":"src/components","sources":["googleApi.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"grid-container\">\r\n      <!--Google Maps will render map here-->\r\n      <div id=\"map\" @click=\"addMarker\"></div>\r\n\r\n      <div id=\"input-area\">\r\n        <p>\r\n          For best results the address should have this format:\r\n          <em>2934 Russell St, Detroit, MI, 48207</em>\r\n        </p>\r\n\r\n        Location to Add: <input v-model=\"currentInput\" type=\"input\" />\r\n        <button v-on:click=\"addToList\">Add to Route</button>\r\n\r\n        <p>Current Locations:</p>\r\n        <button v-on:click=\"generateRoute\">Generate Route</button><br /><br />\r\n        <div\r\n          id=\"currentList\"\r\n          v-for=\"(location, index) of locations\"\r\n          v-bind:key=\"index\"\r\n        >\r\n          <input class=\"current-inputs\" v-model=\"locations[index]\" />\r\n          <button v-on:click=\"removeFromList(index)\">Remove</button>\r\n        </div>\r\n      </div>\r\n\r\n      <!--Google Maps will render directions here-->\r\n      <div id=\"panel\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Map\",\r\n  data() {\r\n    return {\r\n      map: null,\r\n      routeService: null,\r\n      routeRendererService: null,\r\n      currentInput: \"\",\r\n      roundTrip: true,\r\n      mapCenter: { lat: 41.4752, lng: -81.8002 },\r\n      locations: [\r\n        \"15302 Arden Ave, Lakewood OH 44107\",\r\n        \"12978 Emerson AVe, Lakewood OH 44107\",\r\n      ],\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    // This function is called during load, but can also be called to reset the map\r\n    initMap() {\r\n      this.map = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n        center: this.mapCenter,\r\n        zoom: 14,\r\n        maxZoom: 20,\r\n        minZoom: 3,\r\n        streetViewControl: true,\r\n        mapTypeControl: true,\r\n        fullscreenControl: true,\r\n        zoomControl: true,\r\n      });\r\n      infoWindow = new google.maps.InfoWindow();\r\n\r\n\r\n      \r\n      let noPOIStyle = [\r\n        {\r\n          featureType: \"poi\",\r\n          elementType: \"labels\",\r\n          stylers: [{ visibility: \"off\" }],\r\n        },\r\n      ];\r\n      this.map.setOptions({ styles: noPOIStyle });\r\n    },\r\n\r\n    // This function is called to add a new location\r\n    addToList() {\r\n      if (this.currentInput.trim().length === 0) {\r\n        window.alert(\"Location cannot be empty\");\r\n        return;\r\n      }\r\n      this.locations.push(this.currentInput);\r\n      this.currentInput = \"\";\r\n    },\r\n\r\n    // This function is called to remove a location\r\n    removeFromList(index) {\r\n      if (this.locations.length == 2) {\r\n        window.alert(\"A start and end location must be present\");\r\n        return;\r\n      }\r\n\r\n      this.locations.splice(index, 1);\r\n    },\r\n\r\n    // This function calls the Google Maps API, renders the route\r\n    // and retrieves the directions\r\n    generateRoute() {\r\n      for (let i = 0; i < this.locations.length; i++) {\r\n        if (this.locations[i].trim().length === 0) {\r\n          window.alert(\"Location cannot be empty\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      const panel = document.getElementById(\"panel\");\r\n      panel.innerHTML = \"\";\r\n      this.initMap();\r\n\r\n      this.routeService = new window.google.maps.DirectionsService();\r\n      this.routeRendererService = new window.google.maps.DirectionsRenderer();\r\n\r\n      this.routeRendererService.setMap(this.map);\r\n      this.routeRendererService.setPanel(panel);\r\n\r\n      let myWaypoints = [];\r\n\r\n      /*\r\n        The API expects a single waypoint to be an object like this:\r\n        \r\n        {\r\n          location: \"123 somewhere St...\",\r\n          stopover: true\r\n        }\r\n      */\r\n\r\n      for (let i = 1; i < this.locations.length - 1; i++) {\r\n        myWaypoints.push({\r\n          location: this.locations[i],\r\n          stopover: true,\r\n        });\r\n      }\r\n\r\n      this.routeService\r\n        .route({\r\n          origin: this.locations[0],\r\n          destination: this.locations[this.locations.length - 1],\r\n          waypoints: myWaypoints,\r\n          travelMode: window.google.maps.TravelMode.DRIVING,\r\n          avoidTolls: true,\r\n          optimizeWaypoints: true,\r\n        })\r\n        .then((result) => {\r\n          this.routeRendererService.setDirections(result);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error + \"Could not generate route\");\r\n        });\r\n    },\r\n    addMarker(event) {\r\n      const marker = {\r\n        lat: event.latLng.lat(),\r\n        lng: event.latLng.lng(),\r\n      };\r\n      console.log(marker);\r\n      this.markers.push({ position: marker });\r\n      this.$refs.mmm.panTo(marker);\r\n      //this.center = marker;\r\n  },\r\n},\r\n  mounted() {\r\n    this.initMap();\r\n    this.yourPOIs.forEach(poi => {\r\n    var myLatLng = { lat: poi.latitude, lng: poi.longitude };\r\n    var marker =  this.maps.Marker({\r\n        position: myLatLng,\r\n        map: this.myMap,\r\n        title: poi.annotation\r\n        // you can also add data here with key names that are not in use like for example \"uuid: 1\" so you can access that data later on if you click on markers or iterate through them\r\n    });\r\n    marker.addListener('click', function() {\r\n        console.log(marker.uuid); // if you want to react on clicking on a marker\r\n    });\r\n    this.addedMarkers.push(marker);\r\n});\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#grid-container {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-areas:\r\n     \"inputs\"\r\n     \"map\"\r\n    \"directions\";\r\n}\r\n\r\n#map {\r\n  grid-area: map;\r\n  width: 100%;\r\n  height: 65vh;\r\n  margin-top: 10px;\r\n  padding-top: 25px;\r\n}\r\n\r\n#input-area {\r\n  grid-area: inputs;\r\n}\r\n\r\n#panel {\r\n  grid-area: directions;\r\n}\r\n\r\n.current-inputs {\r\n  width: 350px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}