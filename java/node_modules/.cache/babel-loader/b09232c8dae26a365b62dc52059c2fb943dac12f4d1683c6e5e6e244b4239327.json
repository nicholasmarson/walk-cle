{"ast":null,"code":"import _regeneratorRuntime from \"E:/workspace/walk-cle-final-capstone-starter/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"E:/workspace/walk-cle-final-capstone-starter/vue/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"E:/workspace/walk-cle-final-capstone-starter/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport mapboxgl from \"mapbox-gl\";\nimport { MapboxSearchBox } from \"@mapbox/search-js-web\";\nimport * as turf from '@turf/turf';\n\n// const mapboxgl = require(\"mapbox-gl/dist/mapbox-gl.js\");\n// Retrieve API key from environment variables\nmapboxgl.accessToken = process.env.VUE_APP_MAPBOX_KEY;\nexport default {\n  data: function data() {\n    return {\n      map: null,\n      query: \"\",\n      location: {\n        type: \"Point\",\n        coordinates: []\n      },\n      markers: []\n    };\n  },\n  methods: {\n    initMap: function initMap() {\n      // Create map object\n      this.map = new mapboxgl.Map({\n        container: \"map\",\n        style: \"mapbox://styles/mapbox/streets-v12\",\n        center: [-81.700058, 41.506035],\n        zoom: 15\n      });\n\n      // Adds basic zoom and rotation control\n      this.map.addControl(new mapboxgl.NavigationControl());\n      this.map.addControl(new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true,\n        showUserLocation: true\n      }));\n      this.addMapClickListener();\n    },\n    addMapClickListener: function addMapClickListener() {\n      var _this = this;\n      this.map.on(\"click\", function (e) {\n        _this.setLocation(e.lngLat);\n      });\n    },\n    setLocationCoordinates: function setLocationCoordinates(lngLat) {\n      this.setLocationCoordinates.coordinates = [Math.round(lngLat.lng * 10000) / 10000, Math.round(lngLat.lat * 10000) / 10000];\n    },\n    addMapMarker: function addMapMarker(lngLat) {\n      var marker = new mapboxgl.Marker({\n        color: \"blue\"\n      }).setLngLat(lngLat).addTo(this.map);\n      this.markers.push(marker);\n    },\n    removeMapMarkers: function removeMapMarkers() {\n      var oldMarker = document.querySelector(\"mapboxgl-marker\");\n      if (oldMarker) {\n        oldMarker.parentElement.removeChild(oldMarker);\n      }\n      this.markers.forEach(function (marker) {\n        return marker.remove();\n      });\n      this.markers = [];\n    },\n    setLocation: function setLocation(lngLat) {\n      this.addMapMarker(lngLat);\n      this.setLocationCoordinates(lngLat);\n    },\n    requestLocation: function requestLocation() {\n      var _this2 = this;\n      // Request to get the user's current location\n      window.navigator.geolocation.getCurrentPosition(function (position) {\n        // get the latitude and longitude returned\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n\n        // set location data\n        _this2.setLocation({\n          lng: lng,\n          lat: lat\n        });\n\n        // move the ap to show the location\n        _this2.map.flyTo({\n          center: [lng, lat],\n          zoom: 15\n        });\n      });\n    },\n    search: function search() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, responseBody, _responseBody$feature, lng, lat;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"\\n                    https://api.mapbox.com/geocoding/v5/mapbox.places/\\n                    \".concat(_this3.query, \".json?access_token=\").concat(process.env.VUE_APP_MAPBOX_KEY, \"\\n                \"));\n              case 2:\n                response = _context.sent;\n                _this3.query = \"\";\n                _context.next = 6;\n                return response.json();\n              case 6:\n                responseBody = _context.sent;\n                if (!(responseBody.features.length == 0)) {\n                  _context.next = 10;\n                  break;\n                }\n                alert('no results found');\n                return _context.abrupt(\"return\", null);\n              case 10:\n                _responseBody$feature = _slicedToArray(responseBody.features[0].center, 2), lng = _responseBody$feature[0], lat = _responseBody$feature[1];\n                _this3.setLocation({\n                  lng: lng,\n                  lat: lat\n                });\n                _this3.map.flyTo({\n                  center: [lng, lat],\n                  zoom: 15\n                });\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n    this.initMap();\n    var latitude, longitude;\n\n    // Initialize the map at the user's location\n    navigator.geolocation.getCurrentPosition(function (position) {\n      latitude = position.coords.latitude;\n      longitude = position.coords.longitude;\n      var point = turf.point([longitude, latitude]);\n      var options = {\n        units: 'miles'\n      };\n      var radius = 5; // 1 mile\n      var bbox = turf.bbox(turf.buffer(point, radius, options));\n      var searchBox = new MapboxSearchBox();\n      searchBox.accessToken = _this4.ACCESS_TOKEN;\n      searchBox.options = {\n        language: 'en',\n        country: 'us',\n        bbox: bbox // Set the bounding box in the search options\n      };\n\n      _this4.map.addControl(searchBox);\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;AAuBA;AACA;AACA;;AAEA;AACA;AACAA;AAEA;EACAC;IACA;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;IACA;EACA;EACAC;IACAC;MACA;MACA;QACAC;QACAC;QACAC;QACAC;MACA;;MAEA;MACA;MACA;QACAC;UAAAC;QAAA;QACAC;QACAC;MACA;MAEA;IACA;IACAC;MAAA;MACA;QACA;MACA;IACA;IACAC;MACA,2CACAC,wCACAA,uCACA;IACA;IACAC;MACA;QAAAC;MAAA,GACAC,kBACAC;MACA;IACA;IACAC;MACA;MACA;QACAC;MACA;MACA;QAAA;MAAA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MAAA;MACA;MACAC;QAEA;QACA;QACA;;QAEA;QACA;UAAAC;UAAAC;QAAA;;QAEA;QACA;UAAAnB;UAAAC;QAAA;MACA;IACA;IACAmB;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACAC,8GAGA,kGAEA;cAAA;gBALAC;gBAMA;gBAAA;gBAAA,OACAA;cAAA;gBAAAC;gBAAA,MAGAA;kBAAA;kBAAA;gBAAA;gBACAC;gBAAA,iCACA;cAAA;gBAAA,uCAGAD;gBACA;kBAAAL;kBAAAC;gBAAA;gBACA;kBAAAnB;kBAAAC;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;EACA;EACAwB;IAAA;IACA;IAEA;;IAEA;IACAC;MACAC;MACAC;MAGA;MACA;QAAAC;MAAA;MACA;MACA;MAEA;MACAC;MACAA;QACAC;QACAC;QACAC;MACA;;MAEA;IACA;EACA;AACA","names":["mapboxgl","data","map","query","location","type","coordinates","markers","methods","initMap","container","style","center","zoom","positionOptions","enableHighAccuracy","trackUserLocation","showUserLocation","addMapClickListener","setLocationCoordinates","Math","addMapMarker","color","setLngLat","addTo","removeMapMarkers","oldMarker","setLocation","requestLocation","window","lng","lat","search","fetch","response","responseBody","alert","mounted","navigator","latitude","longitude","units","searchBox","language","country","bbox"],"sourceRoot":"src/components","sources":["NewMapBox.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <button @click=\"requestLocation\">Get Current Location</button>\r\n        <button @click=\"removeMapMarkers\">Remove Markers</button>\r\n        <form @submit.prevent=\"search\">\r\n            <input\r\n                type=\"text\"\r\n                name=\"search-location\"\r\n                v-model=\"query\"\r\n                placeholder=\"Search\"\r\n            />\r\n        </form>\r\n        <input \r\n            type=\"text\" \r\n            name=\"location\" \r\n            :value=\"location.coordinates\" \r\n            disabled \r\n        />\r\n        <div id=\"map\"></div>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { MapboxSearchBox } from \"@mapbox/search-js-web\";\r\nimport * as turf from '@turf/turf';\r\n\r\n// const mapboxgl = require(\"mapbox-gl/dist/mapbox-gl.js\");\r\n// Retrieve API key from environment variables\r\nmapboxgl.accessToken = process.env.VUE_APP_MAPBOX_KEY\r\n  \r\nexport default {\r\n    data() {\r\n        return {\r\n            map: null,\r\n            query: \"\",\r\n            location: {\r\n                type: \"Point\",\r\n                coordinates: []\r\n            },\r\n            markers: [],\r\n        };\r\n    },\r\n    methods: {\r\n        initMap() {\r\n            // Create map object\r\n            this.map = new mapboxgl.Map({\r\n                container: \"map\",\r\n                style: \"mapbox://styles/mapbox/streets-v12\",\r\n                center: [-81.700058, 41.506035],\r\n                zoom: 15,\r\n            });\r\n\r\n            // Adds basic zoom and rotation control\r\n            this.map.addControl(new mapboxgl.NavigationControl());\r\n            this.map.addControl(new mapboxgl.GeolocateControl({\r\n                positionOptions: { enableHighAccuracy: true },\r\n                trackUserLocation: true,\r\n                showUserLocation: true,\r\n            }));\r\n\r\n            this.addMapClickListener();\r\n        },\r\n        addMapClickListener() {\r\n            this.map.on(\"click\", (e) => {\r\n                this.setLocation(e.lngLat);\r\n            });\r\n        },\r\n        setLocationCoordinates(lngLat) {\r\n            this.setLocationCoordinates.coordinates = [\r\n                Math.round(lngLat.lng * 10000) / 10000,\r\n                Math.round(lngLat.lat * 10000) / 10000,\r\n            ];\r\n        },\r\n        addMapMarker(lngLat) {\r\n            const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n                .setLngLat(lngLat)\r\n                .addTo(this.map);\r\n            this.markers.push(marker)\r\n        },\r\n        removeMapMarkers() {\r\n            const oldMarker = document.querySelector(\"mapboxgl-marker\");\r\n            if (oldMarker) {\r\n                oldMarker.parentElement.removeChild(oldMarker);\r\n            }\r\n            this.markers.forEach( (marker) => marker.remove());\r\n            this.markers = [];\r\n        },\r\n        setLocation(lngLat) {\r\n            this.addMapMarker(lngLat);\r\n            this.setLocationCoordinates(lngLat);\r\n        },\r\n        requestLocation() {\r\n            // Request to get the user's current location\r\n            window.navigator.geolocation.getCurrentPosition( (position) => {\r\n\r\n                // get the latitude and longitude returned\r\n                const lat = position.coords.latitude;\r\n\t\t\t\tconst lng = position.coords.longitude;\r\n\r\n                // set location data\r\n                this.setLocation({ lng, lat });\r\n\r\n                // move the ap to show the location\r\n                this.map.flyTo({ center: [lng, lat], zoom: 15 });\r\n            })\r\n        },\r\n        async search() {\r\n            const response = await fetch(\r\n                `\r\n                    https://api.mapbox.com/geocoding/v5/mapbox.places/\r\n                    ${this.query}.json?access_token=${process.env.VUE_APP_MAPBOX_KEY}\r\n                `\r\n            );\r\n            this.query = \"\";\r\n            const responseBody = await response.json();\r\n\r\n            // Check we have at least 1 result\r\n            if (responseBody.features.length == 0) {\r\n                alert('no results found')\r\n                return null;\r\n            }\r\n\r\n            const [lng, lat] = responseBody.features[0].center;\r\n            this.setLocation({ lng, lat });\r\n            this.map.flyTo({ center: [lng, lat], zoom: 15 });\r\n        },\r\n    },\r\n    mounted() {\r\n        this.initMap();\r\n  \r\n        let latitude, longitude;\r\n  \r\n        // Initialize the map at the user's location\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            latitude = position.coords.latitude;\r\n            longitude = position.coords.longitude;\r\n\r\n  \r\n            const point = turf.point([longitude, latitude]);\r\n            const options = { units: 'miles' };\r\n            const radius = 5; // 1 mile\r\n            const bbox = turf.bbox(turf.buffer(point, radius, options));\r\n  \r\n            const searchBox = new MapboxSearchBox();\r\n            searchBox.accessToken = this.ACCESS_TOKEN;\r\n            searchBox.options = {\r\n                language: 'en',\r\n                country: 'us',\r\n                bbox: bbox, // Set the bounding box in the search options\r\n            };\r\n  \r\n            this.map.addControl(searchBox);\r\n        });\r\n    },\r\n  };\r\n</script>\r\n  \r\n<style scoped>\r\n#map {\r\n    width: 100%;\r\n    height: 500px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}