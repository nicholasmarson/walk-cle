{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport mapboxgl from \"mapbox-gl\";\n// import { MapboxSearchBox } from \"@mapbox/search-js-web\";\n// import * as turf from \"@turf/turf\";\nimport MapboxDirections from \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\nimport service from '../services/locationService.js';\nimport axios from 'axios';\n// const mapboxgl = require(\"mapbox-gl/dist/mapbox-gl.js\");\n// Retrieve API key from environment variables\nmapboxgl.accessToken = process.env.VUE_APP_MAPBOX_KEY;\nexport default {\n  data: function data() {\n    return {\n      map: null,\n      query: \"\",\n      location: {\n        type: \"Point\",\n        coordinates: []\n      },\n      markers: [],\n      stadiums: [],\n      Bars: [],\n      all: [],\n      parks: [],\n      poi: [],\n      coffee: [],\n      popupTexts: [\"This is the first marker's www.google.com\", \"This is the second marker's custom text.\"\n      // Add more custom texts here, one for each marker\n      ],\n\n      searchBox: null,\n      userLocation: {\n        lat: 0,\n        lng: 0\n      }\n      // created(){\n      //   this.stadiums = service.getAllStadiums().then(\n      //     (rep) =>{ \n      //       this.stadiums = rep.data;\n      //     }\n      //   )\n      // }\n    };\n  },\n\n  methods: {\n    initMap: function initMap() {\n      // Create map object\n      this.map = new mapboxgl.Map({\n        container: \"map\",\n        style: 'mapbox://styles/mapbox/streets-v12',\n        center: [this.userLocation.lng, this.userLocation.lat],\n        zoom: 15\n      });\n      this.addMapClickListener();\n    },\n    addMapClickListener: function addMapClickListener() {\n      var _this = this;\n      this.map.on(\"click\", function (e) {\n        _this.setLocation(e.lngLat);\n      });\n    },\n    setLocationCoordinates: function setLocationCoordinates(lngLat) {\n      this.setLocationCoordinates.coordinates = [Math.round(lngLat.lng * 10000) / 10000, Math.round(lngLat.lat * 10000) / 10000];\n    },\n    addMapMarker: function addMapMarker(lngLat) {\n      var marker = new mapboxgl.Marker({\n        color: \"red\"\n      }).setLngLat(lngLat).addTo(this.map);\n      this.markers.push(marker);\n    },\n    removeMapMarkers: function removeMapMarkers() {\n      this.markers.forEach(function (marker) {\n        return marker.remove();\n      });\n      this.markers = [];\n    },\n    setLocation: function setLocation(lngLat) {\n      this.removeMapMarkers();\n      this.addMapMarker(lngLat);\n      this.setLocationCoordinates(lngLat);\n    },\n    requestLocation: function requestLocation() {\n      var _this2 = this;\n      // Request to get the user's current location\n      navigator.geolocation.getCurrentPosition(function (position) {\n        // get the latitude and longitude returned\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n\n        // set location data\n        _this2.setLocation({\n          lng: lng,\n          lat: lat\n        });\n\n        // move the ap to show the location\n        _this2.map.flyTo({\n          center: [lng, lat],\n          zoom: 15\n        });\n\n        // Store user location\n        _this2.userLocation.lat = lat;\n        _this2.userLocation.lng = lng;\n\n        // Add a marker for the current location\n        _this2.addMapMarker({\n          lng: lng,\n          lat: lat\n        });\n      });\n    },\n    getDirections: function getDirections() {\n      // Set up Mapbox Directions control\n      var directions = new MapboxDirections({\n        accessToken: mapboxgl.accessToken,\n        unit: \"imperial\",\n        profile: \"mapbox/walking\",\n        steps: 2\n      });\n      directions.setOrigin([this.userLocation.lng, this.userLocation.lat]);\n      this.map.addControl(directions, \"bottom-left\");\n    },\n    // search() {\n    //   // Set up Mapbox Search Box\n    //   const point = turf.point([this.userLocation.lng, this.userLocation.lat]);\n    //   const options = { units: \"miles\" };\n    //   const radius = 5; // 1 mile\n    //   const bbox = turf.bbox(turf.buffer(point, radius, options));\n    //   const searchBox = new MapboxSearchBox();\n    //   searchBox.accessToken = mapboxgl.accessToken;\n    //   searchBox.options = {\n    //     language: \"en\",\n    //     country: \"us\",\n    //     bbox: bbox,\n    //   };\n    //   // searchBox.on('result', (result) => {\n    //   //     const { lng, lat } = result.result.geometry.coordinates;\n    //   //     this.addMapMarker({ lng, lat });\n    //   //     this.getDirections({ lng, lat });\n    //   // });\n    //   this.map.addControl(searchBox);\n    // },\n    geoLocate: function geoLocate() {\n      var _this3 = this;\n      // Adds Location control\n      var geolocateControl = new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true,\n        showUserLocation: true\n      });\n      geolocateControl.on(\"geolocate\", function (e) {\n        var lat = e.coords.latitude;\n        var lng = e.coords.longitude;\n        _this3.addMapMarker({\n          lng: lng,\n          lat: lat\n        });\n      });\n      this.map.addControl(geolocateControl);\n    },\n    fetchDataFromAPI: function fetchDataFromAPI() {\n      var _this4 = this;\n      // Assuming 'service.getAllLocations()' is an asynchronous function that returns a promise\n      service.getAllLocations().then(function (response) {\n        // Assuming the response contains an array of locations\n        _this4.locations = response.data;\n      })[\"catch\"](function (error) {\n        console.error('Error fetching locations:', error);\n      });\n    },\n    filterNameSearch: function filterNameSearch() {\n      var _this5 = this;\n      // Define the API endpoint based on the selected location type\n      var apiEndpoint = \"http://localhost:9000/locations/name/\";\n      switch (true) {\n        case this.searchQuery === \"wendy park\":\n          apiEndpoint += \"Wendy%20Park\";\n          break;\n        case this.searchQuery === \"steelers park\":\n          apiEndpoint += \"Settlers%20Park\";\n          break;\n        case this.searchQuery === \"collision bend brewing company\":\n          apiEndpoint += \"Collision%20Bend%20Brewing%20Company\";\n          break;\n        case this.searchQuery === \"butcher and the brewer\":\n          apiEndpoint += \"Butcher%20and%20the%20Brewer\";\n          break;\n        case this.searchQuery === \"brewDog cleveland outpost\":\n          apiEndpoint += \"BrewDog%20Cleveland%20Outpost\";\n          break;\n        case this.searchQuery === \"barley house\":\n          apiEndpoint += \"Barley%20House\";\n          break;\n        case this.searchQuery === \"great lakes brewing\":\n          apiEndpoint += \"Great%20Lakes%20Brewing%20Company\";\n          break;\n        case this.searchQuery === \"progressive field\":\n          apiEndpoint += \"Progressive%20Field\";\n          break;\n        case this.searchQuery === \"cleveland browns stadium\":\n          apiEndpoint += \"Cleveland%20Browns%20Stadium\";\n          break;\n        case this.searchQuery === \"rocket mortgage fieldHouse\":\n          apiEndpoint += \"Rocket%20Mortgage%20FieldHouse\";\n          break;\n        default:\n          break;\n      }\n      // Make an API request with the searchQuery and selected location type\n      axios.get(apiEndpoint, {\n        params: {\n          query: this.searchQuery\n        }\n      }).then(function (response) {\n        var location = response.data;\n\n        // Clear existing markers and popups\n        _this5.removeMarkersAndPopups();\n\n        // Add markers for each location\n\n        var locationId = location.locationId,\n          locationLatitude = location.locationLatitude,\n          locationLongitude = location.locationLongitude,\n          locationName = location.locationName;\n        var marker = new mapboxgl.Marker({\n          color: \"blue\"\n        }).setLngLat([locationLongitude, locationLatitude]).addTo(_this5.map);\n\n        // Create a popup with custom content\n        var popupContent = \"\\n          <div>\\n            <p>\".concat(locationName, \"</p>\\n            <p>\").concat(locationLongitude, \" \\\" \\\" \").concat(locationLatitude, \"</p>\\n            <button id=\\\"checkInBtn\").concat(locationId, \"\\\" class=\\\"check-in-button\\\">Check-In</button>\\n          </div>\\n        \");\n        //41.497257, -81.698738\n        _this5.map.flyTo({\n          center: [-81.698738, 41.497257],\n          zoom: 14\n        });\n        var popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(popupContent);\n\n        // Attach the popup to the marker\n        marker.setPopup(popup);\n\n        // Add the marker to the corresponding category array\n        // add all of the names as or statments\n        if (_this5.searchQuery === \"progressive field\" || _this5.searchQuery === \"cleveland browns stadium\" || _this5.searchQuery === \"rocket mortgage fieldhouse\") {\n          _this5.stadiums.push(marker);\n        } else if (_this5.searchQuery === \"wendy park\" || _this5.searchQuery === \"steelers park\") {\n          _this5.parks.push(marker);\n        } else if (_this5.searchQuery === \"collision bend brewing company\" || _this5.searchQuery === \"butcher and the brewer\" || _this5.searchQuery === \"brewDog cleveland outpost\" || _this5.searchQuery === \"barley house\" || _this5.searchQuery === \"great lakes brewing\") {\n          _this5.Bars.push(marker);\n        } else if (_this5.searchQuery === \"all\") {\n          _this5.all.push(marker);\n        }\n        _this5.searchQuery = '';\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching locations:\", error);\n      });\n    },\n    filterTypeSearch: function filterTypeSearch() {\n      var _this6 = this;\n      // Define the API endpoint based on the selected location type\n      var apiEndpoint = \"http://localhost:9000/locations/\";\n      switch (true) {\n        case this.selectedLocationType === \"stadiums\":\n          apiEndpoint += \"Stadiums\";\n          break;\n        case this.selectedLocationType === \"parks\":\n          apiEndpoint += \"Parks\";\n          break;\n        case this.selectedLocationType === \"bars\":\n          apiEndpoint += \"Bars\";\n          break;\n        default:\n          break;\n      }\n\n      // Make an API request with the searchQuery and selected location type\n      axios.get(apiEndpoint, {\n        params: {\n          query: this.selectedLocationType\n        }\n      }).then(function (response) {\n        var locations = response.data;\n\n        // Clear existing markers and popups\n        _this6.removeMarkersAndPopups();\n\n        // Add markers for each location\n        locations.forEach(function (location) {\n          var locationId = location.locationId,\n            locationLatitude = location.locationLatitude,\n            locationLongitude = location.locationLongitude,\n            locationName = location.locationName;\n          var marker = new mapboxgl.Marker({\n            color: \"blue\"\n          }).setLngLat([locationLongitude, locationLatitude]).addTo(_this6.map);\n\n          // Create a popup with custom content\n          var popupContent = \"\\n          <div>\\n            <p>\".concat(locationName, \"</p>\\n            <p>\").concat(locationLongitude, \" \\\" \\\" \").concat(locationLatitude, \"</p>\\n            <button id=\\\"checkInBtn\").concat(locationId, \"\\\" class=\\\"check-in-button\\\">Check-In</button>\\n          </div>\\n        \");\n          //41.497257, -81.698738\n          _this6.map.flyTo({\n            center: [-81.698738, 41.497257],\n            zoom: 14\n          });\n          var popup = new mapboxgl.Popup({\n            offset: 25\n          }).setHTML(popupContent);\n\n          // Attach the popup to the marker\n          marker.setPopup(popup);\n\n          // Add the marker to the corresponding category array\n          if (_this6.selectedLocationType === \"stadiums\") {\n            _this6.stadiums.push(marker);\n          } else if (_this6.selectedLocationType === \"parks\") {\n            _this6.parks.push(marker);\n          } else if (_this6.selectedLocationType === \"bars\") {\n            _this6.Bars.push(marker);\n          } else if (_this6.selectedLocationType === \"all\") {\n            _this6.all.push(marker);\n          }\n        });\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching locations:\", error);\n      });\n    },\n    removeMarkersAndPopups: function removeMarkersAndPopups() {\n      this.markers.forEach(function (marker) {\n        marker.remove();\n      });\n      this.all.forEach(function (poi) {\n        return poi.remove();\n      });\n      this.stadiums.forEach(function (poi) {\n        poi.remove();\n      });\n      this.Bars.forEach(function (poi) {\n        poi.remove();\n      });\n      this.parks.forEach(function (poi) {\n        poi.remove();\n      });\n      this.poi.forEach(function (poi) {\n        poi.remove();\n      });\n      this.coffee.forEach(function (poi) {\n        poi.remove();\n      });\n      this.parks = [];\n      this.Bars = [];\n      this.poi = [];\n      this.markers = [];\n      this.coffee = [];\n      this.all = [];\n    }\n  },\n  mounted: function mounted() {\n    var _this7 = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      var lat = position.coords.latitude;\n      var lng = position.coords.longitude;\n      _this7.userLocation = {\n        lat: lat,\n        lng: lng\n      };\n      _this7.initMap();\n      _this7.map.flyTo({\n        center: [lng, lat],\n        zoom: 15\n      });\n      _this7.addMapMarker({\n        lng: lng,\n        lat: lat\n      });\n      _this7.getDirections();\n      _this7.search();\n      _this7.navigation();\n      _this7.geoLocate();\n      _this7.fetchDataFromAPI();\n      _this7.fetchDataFroStadiums();\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AAEA;EAEAC;IACA;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC,aACA,6CACA;MACA;MAAA,CACA;;MACAC;MACAC;QACAC;QACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;;EACAC;IACAC;MACA;MACA;QACAC;QACAC;QACAC;QACAC;MACA;MAEA;IACA;IACAC;MAAA;MACA;QACA;MACA;IACA;IACAC;MACA,2CACAC,wCACAA,uCACA;IACA;IACAC;MACA;QAAAC;MAAA,GACAC,kBACAC;MACA;IACA;IACAC;MACA;QAAA;MAAA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MAAA;MACA;MACAC;QACA;QACA;QACA;;QAEA;QACA;UAAAjB;UAAAD;QAAA;;QAEA;QACA;UAAAM;UAAAC;QAAA;;QAEA;QACA;QACA;;QAEA;QACA;UAAAN;UAAAD;QAAA;MACA;IACA;IACAmB;MACA;MACA;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEAC;MAAA;MACA;MACA;QACAC;UACAC;QACA;QACAC;QACAC;MACA;MACAC;QACA;QACA;QACA;UAAA7B;UAAAD;QAAA;MACA;MACA;IACA;IAEA+B;MAAA;MACA;MACAC,0BACAC;QACA;QACA;MACA,WACA;QACAC;MACA;IACA;IAEAC;MAAA;MACA;MACA;MAEA;QACA;UACAC;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UAEA;MAAA;MAEA;MACAC,MACAC;QACAC;UAAArD;QAAA;MACA,GACA+C;QACA;;QAEA;QACA;;QAEA;;QAEA;UAAAO;UAAAC;UAAAC;QACA;UAAA9B;QAAA,GACAC,iDACAC;;QAEA;QACA,+DAEA4B,8CACAD,2GACAE,yFAEA;QACA;QACA;UAAArC;UAAAC;QAAA;QACA;UAAAqC;QAAA,GACAC;;QAEA;QACAC;;QAEA;QACA;QACA,uGACA;UACA;QACA;UACA;QACA,yHACA;UACA;QACA;UACA;QAAA;QAEA;MAEA,WACA;QACAZ;MACA;IACA;IACAa;MAAA;MACA;MACA;MAEA;QACA;UACAX;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UAEA;MAAA;;MAGA;MACAC,MACAC;QACAC;UAAArD;QAAA;MACA,GACA+C;QACA;;QAEA;QACA;;QAEA;QACAe;UACA;YAAAR;YAAAC;YAAAC;UACA;YAAA9B;UAAA,GACAC,iDACAC;;UAEA;UACA,+DAEA4B,8CACAD,2GACAE,yFAEA;UACA;UACA;YAAArC;YAAAC;UAAA;UACA;YAAAqC;UAAA,GACAC;;UAEA;UACAC;;UAGA;UACA;YACA;UACA;YACA;UACA;YACA;UACA;YACA;UAAA;QAEA;MACA,WACA;QACAZ;MACA;IACA;IACAe;MACA;QACAH;MAEA;MACA;QAAA,OACAnD;MAAA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAEA;EACA;EACAuD;IAAA;IACAhC;MACA;MACA;MACA;QAAAlB;QAAAC;MAAA;MACA;MACA;QAAAK;QAAAC;MAAA;MACA;QAAAN;QAAAD;MAAA;MAEA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["mapboxgl","data","map","query","location","type","coordinates","markers","stadiums","Bars","all","parks","poi","coffee","popupTexts","searchBox","userLocation","lat","lng","methods","initMap","container","style","center","zoom","addMapClickListener","setLocationCoordinates","Math","addMapMarker","color","setLngLat","addTo","removeMapMarkers","setLocation","requestLocation","navigator","getDirections","accessToken","unit","profile","steps","directions","geoLocate","positionOptions","enableHighAccuracy","trackUserLocation","showUserLocation","geolocateControl","fetchDataFromAPI","service","then","console","filterNameSearch","apiEndpoint","axios","get","params","locationLatitude","locationLongitude","locationName","locationId","offset","setHTML","marker","filterTypeSearch","locations","removeMarkersAndPopups","mounted"],"sourceRoot":"src/components","sources":["NewMapBox.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"form-search\">\r\n          <!-- <input type=\"text\" name=\"location\" :value=\"location.coordinates\" disabled /> -->\r\n    <form @submit.prevent=\"filterNameSearch\" class=\"name-search\">\r\n      <label for=\"location\">Location:</label>\r\n      <input type=\"text\" id=\"location\" v-model=\"searchQuery\" />\r\n      <button type=\"submit\">Search</button>\r\n    </form>\r\n      <!-- Dropdown Menu -->\r\n    <form @submit.prevent=\"filterTypeSearch\" class=\"type-search\">\r\n      <label for=\"locationType\">Location Type:</label>\r\n      <select id=\"locationType\" v-model=\"selectedLocationType\">\r\n\r\n        <option value=\"all\">All</option>\r\n        <option value=\"stadiums\">Stadiums</option>\r\n        <option value=\"parks\">Parks</option>\r\n        <option value=\"bars\">Bars</option>\r\n      </select>\r\n      <button type=\"submit\">Search</button>\r\n    </form>\r\n    </div>\r\n\r\n    <div id=\"map\"></div>\r\n    <!-- <button class=\"btn\" @click=\"requestLocation\">Get Current Location</button>-->\r\n    \r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport mapboxgl from \"mapbox-gl\";\r\n// import { MapboxSearchBox } from \"@mapbox/search-js-web\";\r\n// import * as turf from \"@turf/turf\";\r\nimport MapboxDirections from \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions\";\r\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\r\nimport service from '../services/locationService.js'\r\nimport axios from 'axios';\r\n// const mapboxgl = require(\"mapbox-gl/dist/mapbox-gl.js\");\r\n// Retrieve API key from environment variables\r\nmapboxgl.accessToken = process.env.VUE_APP_MAPBOX_KEY;\r\n\r\nexport default {\r\n  \r\n  data() {\r\n    return {\r\n      map: null,\r\n      query: \"\",\r\n      location: {\r\n        type: \"Point\",\r\n        coordinates: [],\r\n      },\r\n      markers: [],\r\n      stadiums: [],\r\n      Bars: [],\r\n      all: [],\r\n      parks: [],\r\n      poi: [],\r\n      coffee: [],\r\n       popupTexts: [\r\n        \"This is the first marker's www.google.com\",\r\n        \"This is the second marker's custom text.\",\r\n        // Add more custom texts here, one for each marker\r\n      ],\r\n      searchBox: null,\r\n      userLocation: {\r\n        lat: 0,\r\n        lng: 0,\r\n      },\r\n      // created(){\r\n      //   this.stadiums = service.getAllStadiums().then(\r\n      //     (rep) =>{ \r\n      //       this.stadiums = rep.data;\r\n      //     }\r\n      //   )\r\n      // }\r\n    };\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // Create map object\r\n      this.map = new mapboxgl.Map({\r\n        container: \"map\",\r\n        style: 'mapbox://styles/mapbox/streets-v12',\r\n        center: [this.userLocation.lng, this.userLocation.lat],\r\n        zoom: 15,\r\n      });\r\n\r\n      this.addMapClickListener();\r\n    },\r\n    addMapClickListener() {\r\n      this.map.on(\"click\", (e) => {\r\n        this.setLocation(e.lngLat);\r\n      });\r\n    },\r\n    setLocationCoordinates(lngLat) {\r\n      this.setLocationCoordinates.coordinates = [\r\n        Math.round(lngLat.lng * 10000) / 10000,\r\n        Math.round(lngLat.lat * 10000) / 10000,\r\n      ];\r\n    },\r\n    addMapMarker(lngLat) {\r\n      const marker = new mapboxgl.Marker({ color: \"red\" })\r\n        .setLngLat(lngLat)\r\n        .addTo(this.map);\r\n      this.markers.push(marker);\r\n    },\r\n    removeMapMarkers() {\r\n      this.markers.forEach((marker) => marker.remove());\r\n      this.markers = [];\r\n    },\r\n    setLocation(lngLat) {\r\n      this.removeMapMarkers();\r\n      this.addMapMarker(lngLat);\r\n      this.setLocationCoordinates(lngLat);\r\n    },\r\n    requestLocation() {\r\n      // Request to get the user's current location\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        // get the latitude and longitude returned\r\n        const lat = position.coords.latitude;\r\n        const lng = position.coords.longitude;\r\n\r\n        // set location data\r\n        this.setLocation({ lng, lat });\r\n\r\n        // move the ap to show the location\r\n        this.map.flyTo({ center: [lng, lat], zoom: 15 });\r\n\r\n        // Store user location\r\n        this.userLocation.lat = lat;\r\n        this.userLocation.lng = lng;\r\n\r\n        // Add a marker for the current location\r\n        this.addMapMarker({ lng, lat });\r\n      });\r\n    },\r\n    getDirections() {\r\n      // Set up Mapbox Directions control\r\n      const directions = new MapboxDirections({\r\n        accessToken: mapboxgl.accessToken,\r\n        unit: \"imperial\",\r\n        profile: \"mapbox/walking\",\r\n        steps: 2,\r\n      });\r\n      directions.setOrigin([this.userLocation.lng, this.userLocation.lat]);\r\n      this.map.addControl(directions, \"bottom-left\");\r\n    },\r\n    // search() {\r\n    //   // Set up Mapbox Search Box\r\n    //   const point = turf.point([this.userLocation.lng, this.userLocation.lat]);\r\n    //   const options = { units: \"miles\" };\r\n    //   const radius = 5; // 1 mile\r\n    //   const bbox = turf.bbox(turf.buffer(point, radius, options));\r\n\r\n    //   const searchBox = new MapboxSearchBox();\r\n    //   searchBox.accessToken = mapboxgl.accessToken;\r\n    //   searchBox.options = {\r\n    //     language: \"en\",\r\n    //     country: \"us\",\r\n    //     bbox: bbox,\r\n    //   };\r\n\r\n    //   // searchBox.on('result', (result) => {\r\n    //   //     const { lng, lat } = result.result.geometry.coordinates;\r\n    //   //     this.addMapMarker({ lng, lat });\r\n    //   //     this.getDirections({ lng, lat });\r\n    //   // });\r\n\r\n    //   this.map.addControl(searchBox);\r\n    // },\r\n    \r\n    geoLocate() {\r\n      // Adds Location control\r\n      const geolocateControl = new mapboxgl.GeolocateControl({\r\n        positionOptions: {\r\n          enableHighAccuracy: true,\r\n        },\r\n        trackUserLocation: true,\r\n        showUserLocation: true,\r\n      });\r\n      geolocateControl.on(\"geolocate\", (e) => {\r\n        const lat = e.coords.latitude;\r\n        const lng = e.coords.longitude;\r\n        this.addMapMarker({ lng, lat });\r\n      });\r\n      this.map.addControl(geolocateControl);\r\n    },\r\n     \r\n    fetchDataFromAPI() {\r\n      // Assuming 'service.getAllLocations()' is an asynchronous function that returns a promise\r\n      service.getAllLocations()\r\n        .then((response) => {\r\n          // Assuming the response contains an array of locations\r\n          this.locations = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching locations:', error);\r\n        });\r\n    },\r\n\r\n filterNameSearch(){\r\n   // Define the API endpoint based on the selected location type\r\n  let apiEndpoint = \"http://localhost:9000/locations/name/\";\r\n\r\n  switch (true) {\r\n  case this.searchQuery === \"wendy park\":\r\n    apiEndpoint += \"Wendy%20Park\";\r\n    break;\r\n    case this.searchQuery === \"steelers park\":\r\n    apiEndpoint += \"Settlers%20Park\";\r\n    break;\r\n    case this.searchQuery === \"collision bend brewing company\":\r\n    apiEndpoint += \"Collision%20Bend%20Brewing%20Company\";\r\n    break;\r\n    case this.searchQuery === \"butcher and the brewer\":\r\n    apiEndpoint += \"Butcher%20and%20the%20Brewer\";\r\n    break;\r\n  case  this.searchQuery === \"brewDog cleveland outpost\":\r\n    apiEndpoint += \"BrewDog%20Cleveland%20Outpost\";\r\n    break;\r\n    case  this.searchQuery === \"barley house\":\r\n    apiEndpoint += \"Barley%20House\";\r\n    break;\r\n  case this.searchQuery === \"great lakes brewing\":\r\n    apiEndpoint += \"Great%20Lakes%20Brewing%20Company\";\r\n    break;\r\n    case this.searchQuery === \"progressive field\":\r\n    apiEndpoint += \"Progressive%20Field\";\r\n    break;\r\n    case this.searchQuery === \"cleveland browns stadium\":\r\n    apiEndpoint += \"Cleveland%20Browns%20Stadium\";\r\n    break;\r\n    case this.searchQuery === \"rocket mortgage fieldHouse\":\r\n    apiEndpoint += \"Rocket%20Mortgage%20FieldHouse\";\r\n    break;\r\n  default:\r\n  \r\n    break;\r\n}\r\n  // Make an API request with the searchQuery and selected location type\r\n  axios\r\n    .get(apiEndpoint, {\r\n      params: { query: this.searchQuery },\r\n    })\r\n    .then((response) => {\r\n      const location = response.data;\r\n\r\n      // Clear existing markers and popups\r\n      this.removeMarkersAndPopups();\r\n\r\n      // Add markers for each location\r\n      \r\n        const { locationId, locationLatitude, locationLongitude, locationName } = location;\r\n        const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n          .setLngLat([locationLongitude, locationLatitude])\r\n          .addTo(this.map);\r\n\r\n        // Create a popup with custom content\r\n        const popupContent = `\r\n          <div>\r\n            <p>${locationName}</p>\r\n            <p>${locationLongitude} \" \" ${locationLatitude}</p>\r\n            <button id=\"checkInBtn${locationId}\" class=\"check-in-button\">Check-In</button>\r\n          </div>\r\n        `;\r\n        //41.497257, -81.698738\r\n        this.map.flyTo({ center: [-81.698738, 41.497257], zoom: 14 });\r\n        const popup = new mapboxgl.Popup({ offset: 25 })\r\n          .setHTML(popupContent);\r\n\r\n        // Attach the popup to the marker\r\n        marker.setPopup(popup);\r\n\r\n        // Add the marker to the corresponding category array\r\n        // add all of the names as or statments\r\n        if (this.searchQuery === \"progressive field\" || this.searchQuery ===  \"cleveland browns stadium\"\r\n        || this.searchQuery === \"rocket mortgage fieldhouse\" ) {\r\n          this.stadiums.push(marker);\r\n        } else if (this.searchQuery === \"wendy park\" || this.searchQuery === \"steelers park\") {\r\n          this.parks.push(marker);\r\n        } else if (this.searchQuery === \"collision bend brewing company\" || this.searchQuery === \"butcher and the brewer\"\r\n        || this.searchQuery === \"brewDog cleveland outpost\" || this.searchQuery === \"barley house\" || this.searchQuery === \"great lakes brewing\") {\r\n          this.Bars.push(marker);\r\n        }else if (this.searchQuery === \"all\"){\r\n          this.all.push(marker)}\r\n\r\n          this.searchQuery = '';\r\n        \r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching locations:\", error);\r\n    });\r\n  },\r\nfilterTypeSearch(){\r\n   // Define the API endpoint based on the selected location type\r\n  let apiEndpoint = \"http://localhost:9000/locations/\";\r\n\r\n  switch (true) {\r\n  case this.selectedLocationType === \"stadiums\" :\r\n    apiEndpoint += \"Stadiums\";\r\n    break;\r\n  case this.selectedLocationType === \"parks\" :\r\n    apiEndpoint += \"Parks\";\r\n    break;\r\n  case this.selectedLocationType === \"bars\" :\r\n    apiEndpoint += \"Bars\";\r\n    break;\r\n  default:\r\n\r\n    break;\r\n}\r\n\r\n  // Make an API request with the searchQuery and selected location type\r\n  axios\r\n    .get(apiEndpoint, {\r\n      params: { query: this.selectedLocationType },\r\n    })\r\n    .then((response) => {\r\n      const locations = response.data;\r\n\r\n      // Clear existing markers and popups\r\n      this.removeMarkersAndPopups();\r\n\r\n      // Add markers for each location\r\n      locations.forEach((location) => {\r\n        const { locationId, locationLatitude, locationLongitude, locationName } = location;\r\n        const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n          .setLngLat([locationLongitude, locationLatitude])\r\n          .addTo(this.map);\r\n\r\n        // Create a popup with custom content\r\n        const popupContent = `\r\n          <div>\r\n            <p>${locationName}</p>\r\n            <p>${locationLongitude} \" \" ${locationLatitude}</p>\r\n            <button id=\"checkInBtn${locationId}\" class=\"check-in-button\">Check-In</button>\r\n          </div>\r\n        `;\r\n        //41.497257, -81.698738\r\n        this.map.flyTo({ center: [-81.698738, 41.497257], zoom: 14 });\r\n        const popup = new mapboxgl.Popup({ offset: 25 })\r\n          .setHTML(popupContent);\r\n\r\n        // Attach the popup to the marker\r\n        marker.setPopup(popup);\r\n        \r\n\r\n        // Add the marker to the corresponding category array\r\n        if (this.selectedLocationType === \"stadiums\") {\r\n          this.stadiums.push(marker);\r\n        } else if (this.selectedLocationType === \"parks\") {\r\n          this.parks.push(marker);\r\n        } else if (this.selectedLocationType === \"bars\") {\r\n          this.Bars.push(marker);\r\n        }else if (this.selectedLocationType === \"all\"){\r\n          this.all.push(marker)}\r\n        \r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching locations:\", error);\r\n    });\r\n  },\r\n    removeMarkersAndPopups() {\r\n  this.markers.forEach((marker) => {\r\n    marker.remove();\r\n    \r\n  });\r\n  this.all.forEach((poi) =>\r\n  poi.remove())\r\n  this.stadiums.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.Bars.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.parks.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.poi.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.coffee.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.parks = [];\r\n  this.Bars = [];\r\n  this.poi = [];\r\n  this.markers = [];\r\n  this.coffee = [];\r\n  this.all =[];\r\n  \r\n    },\r\n  },\r\n  mounted() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const lat = position.coords.latitude;\r\n      const lng = position.coords.longitude;\r\n      this.userLocation = { lat, lng };\r\n      this.initMap();\r\n      this.map.flyTo({ center: [lng, lat], zoom: 15 });\r\n      this.addMapMarker({ lng, lat });\r\n\r\n      this.getDirections();\r\n      this.search();\r\n      this.navigation();\r\n      this.geoLocate();\r\n      this.fetchDataFromAPI(); \r\n      this.fetchDataFroStadiums()\r\n    });\r\n  },\r\n};\r\n</script>\r\n  \r\n<style scoped>\r\n#map {\r\n  grid-area: map;\r\n  width: 100vw;\r\n  height: 100%;\r\n}\r\n\r\n.name-search {\r\n  grid-area: name\r\n}\r\n\r\n.type-search {\r\n  grid-area: type\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-areas:\r\n    \"name search\"\r\n    \"map map\";\r\n}\r\n\r\n.mapbox-directions-instructions {\r\n  \r\n  font-family: \"Urbanist\", sans-serif;\r\n  font-size: 14px;\r\n  color: #333;\r\n}\r\n\r\n.mapbox-directions-route-summary {\r\n  height: 1vh;\r\n  width: 1vw;\r\n  font-family: \"Urbanist\", sans-serif;\r\n}\r\n\r\n.mapbox-directions-step {\r\n  height: 1vh;\r\n  width: 1vw;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.mapbox-directions-step-number {\r\n  height: 1vh;\r\n  width: 1vw;\r\n  font-weight: bold;\r\n  color: #0078d4;\r\n}\r\n\r\n.mapbox-directions-step-text {\r\n  height: 1vh;\r\n  width: 1vw;\r\n  color: #000000;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}