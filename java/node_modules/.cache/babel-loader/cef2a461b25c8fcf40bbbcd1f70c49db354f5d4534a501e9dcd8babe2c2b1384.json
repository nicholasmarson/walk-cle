{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxDirections from \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\nmapboxgl.accessToken = process.env.VUE_APP_MAPBOX_KEY;\nexport default {\n  data: function data() {\n    return {\n      map: null,\n      stadiums: [],\n      popupTexts: [\"Stadium 1\", \"Stadium 2\", \"Stadium 3\"\n      // Add more popup texts here\n      ],\n\n      currentPopupIndex: null,\n      popups: []\n    };\n  },\n  methods: {\n    initMap: function initMap() {\n      // Create map object\n      this.map = new mapboxgl.Map({\n        container: \"map\",\n        style: \"mapbox://styles/walkcle216/cln4qqvn306wt01qi05mi9h14\",\n        center: [-81.681290, 41.505493],\n        zoom: 15\n      });\n    },\n    getDirections: function getDirections() {\n      // Set up Mapbox Directions control\n      var directions = new MapboxDirections({\n        accessToken: mapboxgl.accessToken,\n        unit: \"imperial\",\n        profile: \"mapbox/walking\"\n      });\n      directions.setOrigin();\n      this.map.addControl(directions, \"bottom-left\");\n    },\n    navigation: function navigation() {\n      // Adds basic zoom and rotation control\n      this.map.addControl(new mapboxgl.NavigationControl());\n    },\n    requestLocation: function requestLocation() {\n      var _this = this;\n      // Request to get the user's current location\n      navigator.geolocation.getCurrentPosition(function (position) {\n        // get the latitude and longitude returned\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n\n        // set location data\n        _this.setLocation({\n          lng: lng,\n          lat: lat\n        });\n\n        // move the ap to show the location\n        _this.map.flyTo({\n          center: [lng, lat],\n          zoom: 15\n        });\n\n        // Store user location\n        _this.userLocation.lat = lat;\n        _this.userLocation.lng = lng;\n\n        // Add a marker for the current location\n        _this.addMapMarker({\n          lng: lng,\n          lat: lat\n        });\n      });\n    },\n    addSports: function addSports() {\n      var _this2 = this;\n      var coordinates = [[-81.6852949, 41.4958921], [-81.6995481, 41.5060535], [-81.6880574, 41.4965474]\n      // Add more coordinates here\n      ];\n\n      console.log(\"Coordinates:\", coordinates);\n\n      // Remove existing markers and popups\n      this.removeMarkersAndPopups();\n      this.map.flyTo({\n        center: [-81.6852949, 41.490645],\n        zoom: 15\n      });\n\n      // Add markers and popups for each coordinate\n      coordinates.forEach(function (coord, index) {\n        var marker = new mapboxgl.Marker({\n          color: \"blue\"\n        }).setLngLat(coord).addTo(_this2.map);\n\n        // Create a popup with custom content\n        var popupContent = \"\\n          <div>\\n            <p>\".concat(_this2.popupTexts[index], \"</p>\\n            <img src=\\\"https://example.com/your-image-url.jpg\\\" alt=\\\"Image\\\" width=\\\"200\\\"/>\\n          </div>\\n        \");\n        var popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(popupContent);\n\n        // Attach the popup to the marker\n        marker.setPopup(popup);\n        _this2.popups.push(popup);\n\n        // Attach a click event handler to the marker\n        marker.getElement().addEventListener(\"click\", function () {\n          // Close the currently open popup if there is one\n          if (_this2.currentPopupIndex !== null) {\n            _this2.popups[_this2.currentPopupIndex].remove();\n          }\n          // Open the clicked popup\n          popup.addTo(_this2.map);\n          _this2.currentPopupIndex = index;\n        });\n        _this2.stadiums.push(marker);\n      });\n    },\n    removeMarkersAndPopups: function removeMarkersAndPopups() {\n      this.stadiums.forEach(function (marker) {\n        marker.remove();\n      });\n      this.stadiums = [];\n      this.popups.forEach(function (popup) {\n        popup.remove();\n      });\n      this.popups = [];\n      this.currentPopupIndex = null;\n    }\n  },\n  mounted: function mounted() {\n    this.initMap();\n    this.getDirections();\n    this.navigation();\n    this.requestLocation();\n  }\n};","map":{"version":3,"mappings":";;;;;AAQA;AACA;AACA;AAEAA;AACA;EACAC;IACA;MACAC;MACAC;MACAC,aACA,aACA,aACA;MACA;MAAA,CACA;;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;MACA;QACAC;QACAC;QACAC;QACAC;MACA;IACA;IACAC;MACA;MACA;QACAC;QACAC;QACAC;MACA;MACAC;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MAAA;MACA;MACAC;QACA;QACA;QACA;;QAEA;QACA;UAAAC;UAAAC;QAAA;;QAEA;QACA;UAAAX;UAAAC;QAAA;;QAEA;QACA;QACA;;QAEA;QACA;UAAAS;UAAAC;QAAA;MACA;IACA;IAEAC;MAAA;MACA,mBACA,2BACA,2BACA;MACA;MAAA,CACA;;MAEAC;;MAEA;MACA;MACA;QAAAb;QAAAC;MAAA;;MAEA;MACAa;QACA;UAAAC;QAAA,GACAC,iBACAC;;QAEA;QACA,+DAEA,4JAGA;QAEA;UAAAC;QAAA,GACAC;;QAEA;QACAC;QACA;;QAEA;QACAA;UACA;UACA;YACA;UACA;UACA;UACAC;UACA;QACA;QAEA;MACA;IACA;IACAC;MACA;QACAF;MACA;MACA;MACA;QACAC;MACA;MACA;MACA;IACA;EAGA;EACAE;IACA;IACA;IACA;IACA;EACA;AACA","names":["mapboxgl","data","map","stadiums","popupTexts","currentPopupIndex","popups","methods","initMap","container","style","center","zoom","getDirections","accessToken","unit","profile","directions","navigation","requestLocation","navigator","lng","lat","addSports","console","coordinates","color","setLngLat","addTo","offset","setHTML","marker","popup","removeMarkersAndPopups","mounted"],"sourceRoot":"src/components","sources":["layers.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <button id=\"btn\" @click=\"addSports\">Add Markers</button>\r\n    <div id=\"map\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport MapboxDirections from \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions\";\r\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\r\n\r\nmapboxgl.accessToken = process.env.VUE_APP_MAPBOX_KEY;\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n      stadiums: [],\r\n      popupTexts: [\r\n        \"Stadium 1\",\r\n        \"Stadium 2\",\r\n        \"Stadium 3\",\r\n        // Add more popup texts here\r\n      ],\r\n      currentPopupIndex: null,\r\n      popups: [],\r\n    };\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // Create map object\r\n      this.map = new mapboxgl.Map({\r\n        container: \"map\",\r\n        style: \"mapbox://styles/walkcle216/cln4qqvn306wt01qi05mi9h14\",\r\n        center: [-81.681290, 41.505493],\r\n        zoom: 15,\r\n      });\r\n    },\r\n     getDirections() {\r\n      // Set up Mapbox Directions control\r\n      const directions = new MapboxDirections({\r\n        accessToken: mapboxgl.accessToken,\r\n        unit: \"imperial\",\r\n        profile: \"mapbox/walking\",\r\n      });\r\n      directions.setOrigin();\r\n      this.map.addControl(directions, \"bottom-left\");\r\n    },\r\n    navigation() {\r\n      // Adds basic zoom and rotation control\r\n      this.map.addControl(new mapboxgl.NavigationControl());\r\n    },\r\n    requestLocation() {\r\n      // Request to get the user's current location\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        // get the latitude and longitude returned\r\n        const lat = position.coords.latitude;\r\n        const lng = position.coords.longitude;\r\n\r\n        // set location data\r\n        this.setLocation({ lng, lat });\r\n\r\n        // move the ap to show the location\r\n        this.map.flyTo({ center: [lng, lat], zoom: 15 });\r\n\r\n        // Store user location\r\n        this.userLocation.lat = lat;\r\n        this.userLocation.lng = lng;\r\n\r\n        // Add a marker for the current location\r\n        this.addMapMarker({ lng, lat });\r\n      });\r\n    },\r\n\r\n    addSports() {\r\n      const coordinates = [\r\n        [-81.6852949, 41.4958921],\r\n        [-81.6995481, 41.5060535],\r\n        [-81.6880574, 41.4965474],\r\n        // Add more coordinates here\r\n      ];\r\n\r\n      console.log(\"Coordinates:\", coordinates);\r\n\r\n      // Remove existing markers and popups\r\n      this.removeMarkersAndPopups();\r\n      this.map.flyTo({ center: [-81.6852949, 41.490645], zoom: 15 });\r\n\r\n      // Add markers and popups for each coordinate\r\n      coordinates.forEach((coord, index) => {\r\n        const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n          .setLngLat(coord)\r\n          .addTo(this.map);\r\n\r\n        // Create a popup with custom content\r\n        const popupContent = `\r\n          <div>\r\n            <p>${this.popupTexts[index]}</p>\r\n            <img src=\"https://example.com/your-image-url.jpg\" alt=\"Image\" width=\"200\"/>\r\n          </div>\r\n        `;\r\n\r\n        const popup = new mapboxgl.Popup({ offset: 25 })\r\n          .setHTML(popupContent);\r\n\r\n        // Attach the popup to the marker\r\n        marker.setPopup(popup);\r\n        this.popups.push(popup);\r\n\r\n        // Attach a click event handler to the marker\r\n        marker.getElement().addEventListener(\"click\", () => {\r\n          // Close the currently open popup if there is one\r\n          if (this.currentPopupIndex !== null) {\r\n            this.popups[this.currentPopupIndex].remove();\r\n          }\r\n          // Open the clicked popup\r\n          popup.addTo(this.map);\r\n          this.currentPopupIndex = index;\r\n        });\r\n\r\n        this.stadiums.push(marker);\r\n      });\r\n    },\r\n    removeMarkersAndPopups() {\r\n      this.stadiums.forEach((marker) => {\r\n        marker.remove();\r\n      });\r\n      this.stadiums = [];\r\n      this.popups.forEach((popup) => {\r\n        popup.remove();\r\n      });\r\n      this.popups = [];\r\n      this.currentPopupIndex = null;\r\n    },\r\n   \r\n    \r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n    this.getDirections();\r\n    this.navigation();\r\n    this.requestLocation();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  height: 80vh;\r\n  width: 100vw;\r\n}\r\n.btn {\r\n  float: inline-end;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}