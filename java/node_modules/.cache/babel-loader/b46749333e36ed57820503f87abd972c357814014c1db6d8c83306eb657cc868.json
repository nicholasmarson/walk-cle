{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport mapboxgl from \"mapbox-gl\";\nimport { MapboxSearchBox } from \"@mapbox/search-js-web\";\nimport * as turf from \"@turf/turf\";\nimport MapboxDirections from \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\nimport service from '../services/locationService.js';\n// const mapboxgl = require(\"mapbox-gl/dist/mapbox-gl.js\");\n// Retrieve API key from environment variables\nmapboxgl.accessToken = process.env.VUE_APP_MAPBOX_KEY;\nexport default {\n  data: function data() {\n    return {\n      map: null,\n      query: \"\",\n      location: {\n        type: \"Point\",\n        coordinates: []\n      },\n      markers: [],\n      stadiums: [],\n      Bars: [],\n      parks: [],\n      poi: [],\n      coffee: [],\n      popupTexts: [\"This is the first marker's www.google.com\", \"This is the second marker's custom text.\"\n      // Add more custom texts here, one for each marker\n      ],\n\n      searchBox: null,\n      userLocation: {\n        lat: 0,\n        lng: 0\n      },\n      created: function created() {\n        var _this = this;\n        this.stadiums = service.getAllLocations().then(function (rep) {\n          _this.stadiums = rep.data;\n        });\n      }\n    };\n  },\n  methods: {\n    initMap: function initMap() {\n      // Create map object\n      this.map = new mapboxgl.Map({\n        container: \"map\",\n        style: \"mapbox://styles/walkcle216/cln4qqvn306wt01qi05mi9h14\",\n        center: [this.userLocation.lng, this.userLocation.lat],\n        zoom: 15\n      });\n      this.addMapClickListener();\n    },\n    addMapClickListener: function addMapClickListener() {\n      var _this2 = this;\n      this.map.on(\"click\", function (e) {\n        _this2.setLocation(e.lngLat);\n      });\n    },\n    setLocationCoordinates: function setLocationCoordinates(lngLat) {\n      this.setLocationCoordinates.coordinates = [Math.round(lngLat.lng * 10000) / 10000, Math.round(lngLat.lat * 10000) / 10000];\n    },\n    addMapMarker: function addMapMarker(lngLat) {\n      var marker = new mapboxgl.Marker({\n        color: \"blue\"\n      }).setLngLat(lngLat).addTo(this.map);\n      this.markers.push(marker);\n    },\n    removeMapMarkers: function removeMapMarkers() {\n      this.markers.forEach(function (marker) {\n        return marker.remove();\n      });\n      this.markers = [];\n    },\n    setLocation: function setLocation(lngLat) {\n      this.removeMapMarkers();\n      this.addMapMarker(lngLat);\n      this.setLocationCoordinates(lngLat);\n    },\n    requestLocation: function requestLocation() {\n      var _this3 = this;\n      // Request to get the user's current location\n      navigator.geolocation.getCurrentPosition(function (position) {\n        // get the latitude and longitude returned\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n\n        // set location data\n        _this3.setLocation({\n          lng: lng,\n          lat: lat\n        });\n\n        // move the ap to show the location\n        _this3.map.flyTo({\n          center: [lng, lat],\n          zoom: 15\n        });\n\n        // Store user location\n        _this3.userLocation.lat = lat;\n        _this3.userLocation.lng = lng;\n\n        // Add a marker for the current location\n        _this3.addMapMarker({\n          lng: lng,\n          lat: lat\n        });\n      });\n    },\n    getDirections: function getDirections() {\n      // Set up Mapbox Directions control\n      var directions = new MapboxDirections({\n        accessToken: mapboxgl.accessToken,\n        unit: \"imperial\",\n        profile: \"mapbox/walking\"\n      });\n      directions.setOrigin([this.userLocation.lng, this.userLocation.lat]);\n      this.map.addControl(directions, \"bottom-left\");\n    },\n    search: function search() {\n      // Set up Mapbox Search Box\n      var point = turf.point([this.userLocation.lng, this.userLocation.lat]);\n      var options = {\n        units: \"miles\"\n      };\n      var radius = 5; // 1 mile\n      var bbox = turf.bbox(turf.buffer(point, radius, options));\n      var searchBox = new MapboxSearchBox();\n      searchBox.accessToken = mapboxgl.accessToken;\n      searchBox.options = {\n        language: \"en\",\n        country: \"us\",\n        bbox: bbox\n      };\n\n      // searchBox.on('result', (result) => {\n      //     const { lng, lat } = result.result.geometry.coordinates;\n      //     this.addMapMarker({ lng, lat });\n      //     this.getDirections({ lng, lat });\n      // });\n\n      this.map.addControl(searchBox);\n    },\n    navigation: function navigation() {\n      // Adds basic zoom and rotation control\n      this.map.addControl(new mapboxgl.NavigationControl());\n    },\n    geoLocate: function geoLocate() {\n      var _this4 = this;\n      // Adds Location control\n      var geolocateControl = new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true,\n        showUserLocation: true\n      });\n      geolocateControl.on(\"geolocate\", function (e) {\n        var lat = e.coords.latitude;\n        var lng = e.coords.longitude;\n        _this4.addMapMarker({\n          lng: lng,\n          lat: lat\n        });\n      });\n      this.map.addControl(geolocateControl);\n    },\n    addSports: function addSports() {\n      var _this5 = this;\n      var coordinates = this.stadiums.longitude;\n      console.log(\"Coordinates:\", coordinates);\n\n      // Remove existing markers and popups\n      this.removeMarkersAndPopups();\n      this.map.flyTo({\n        center: [-81.6852949, 41.490645],\n        zoom: 15\n      });\n\n      // Add markers for each coordinate\n      coordinates.forEach(function (coord, index) {\n        var marker = new mapboxgl.Marker({\n          color: \"blue\"\n        }).setLngLat(coord).addTo(_this5.map);\n\n        // Create a popup with custom content\n        var popupContent = \"\\n              <div>\\n                <p>\".concat(_this5.popupTexts[index], \"</p>\\n                <a href=\\\"https://www.google.com\\\" target=\\\"_blank\\\">Visit Google</a>\\n                <img src=\\\"@/assets/logo/small.png\\\" alt=\\\"Image\\\" width=\\\"200\\\"/>\\n                <button id=\\\"checkInBtn\").concat(index, \"\\\" class=\\\"check-in-button\\\">Check-In</button>\\n              </div>\\n            \");\n        var popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(popupContent);\n\n        // Attach the popup to the marker\n        marker.setPopup(popup);\n\n        // Attach a click event handler to the check-in button\n        // const checkInBtn = document.getElementById(`checkInBtn${index}`);\n        // checkInBtn.addEventListener(\"click\", () => {\n        //   // Handle the check-in action here (e.g., show a confirmation dialog)\n        //   alert(\"Checked in!\");\n        // });\n\n        _this5.stadiums.push(marker);\n      });\n    },\n    addBars: function addBars() {\n      var _this6 = this;\n      var coordinates = [[-81.7037735, 41.4986853], [-81.6900132, 41.4991465], [-81.6991611, 41.5005667], [-81.698024, 41.492705], [-81.7045326, 41.4844029]\n      // Replace with your desired coordinates\n      // Add more coordinates here\n      ];\n\n      // Debugging: Log the coordinates array\n      // Debugging: Log the coordinates array\n      console.log(\"Coordinates:\", coordinates);\n\n      // Remove existing markers and popups\n      this.removeMarkersAndPopups();\n      this.map.flyTo({\n        center: [-81.6852949, 41.490645],\n        zoom: 15\n      });\n      // Add markers for each coordinate\n      coordinates.forEach(function (coord, index) {\n        var marker = new mapboxgl.Marker({\n          color: \"blue\"\n        }).setLngLat(coord).addTo(_this6.map);\n\n        // Create a popup with custom content\n        var popupContent = \"\\n          <div>\\n            <p>\".concat(_this6.popupTexts[index], \"</p>\\n            <img src=\\\"https://example.com/your-image-url.jpg\\\" alt=\\\"Image\\\" width=\\\"200\\\"/>\\n            <button id=\\\"checkInBtn\").concat(index, \"\\\" class=\\\"check-in-button\\\">Check-In</button>\\n          </div>\\n        \");\n        var popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(popupContent);\n\n        // Attach the popup to the marker\n        marker.setPopup(popup);\n        _this6.markers.push(marker);\n      });\n    },\n    fetchDataFromAPI: function fetchDataFromAPI() {\n      var _this7 = this;\n      // Assuming 'service.getAllLocations()' is an asynchronous function that returns a promise\n      service.getAllLocations().then(function (response) {\n        // Assuming the response contains an array of locations\n        _this7.locations = response.data;\n      })[\"catch\"](function (error) {\n        console.error('Error fetching locations:', error);\n      });\n    },\n    fetchDataFroStadiums: function fetchDataFroStadiums() {\n      var _this8 = this;\n      // Assuming 'service.getAllLocations()' is an asynchronous function that returns a promise\n      service.getAllStadiums().then(function (response) {\n        // Assuming the response contains an array of locations\n        _this8.stadium = response.data;\n      })[\"catch\"](function (error) {\n        console.error('Error fetching locations:', error);\n      });\n    },\n    addMarkersAndPopups: function addMarkersAndPopups() {\n      var _this9 = this;\n      this.locations.forEach(function (location) {\n        var locationName = location.locationName,\n          locationLatitude = location.locationLatitude,\n          locationLongitude = location.locationLongitude;\n\n        // Create a marker at the specified location\n        var stadiums = new mapboxgl.Marker({\n          color: \"blue\"\n        }).setLngLat([locationLongitude, locationLatitude]).addTo(_this9.map);\n\n        // Create a popup with custom content\n        var popupContent = \"\\n        <div>\\n          <p>\".concat(locationName, \"</p>\\n          <p>\").concat(locationLatitude, \"</p>\\n          <button id=\\\"checkInBtn\").concat(_this9.locationId, \"\\\" class=\\\"check-in-button\\\">Check-In</button>\\n        </div>\\n      \");\n        var popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(popupContent);\n\n        // Attach the popup to the marker\n        stadiums.setPopup(popup);\n      });\n    },\n    addParks: function addParks() {\n      var _this10 = this;\n      var coordinates = [[-81.7138946, 41.4991564], [-81.7013211, 41.4966056]\n      // Add more coordinates here\n      ];\n\n      // Debugging: Log the coordinates array\n      console.log(\"Coordinates:\", coordinates);\n\n      // Remove existing markers and popups\n      this.removeMarkersAndPopups();\n      this.map.flyTo({\n        center: [-81.6852949, 41.490645],\n        zoom: 15\n      });\n      // Add markers for each coordinate\n      coordinates.forEach(function (coord, index) {\n        var marker = new mapboxgl.Marker({\n          color: \"blue\"\n        }).setLngLat(coord).addTo(_this10.map);\n\n        // Get the custom text for this marker\n        var popupContent = \"\\n          <div>\\n            <p>\".concat(_this10.popupTexts[index], \"</p>\\n            <img src=\\\"https://example.com/your-image-url.jpg\\\" alt=\\\"Image\\\" width=\\\"200\\\"/>\\n            <button id=\\\"checkInBtn\").concat(index, \"\\\" class=\\\"check-in-button\\\">Check-In</button>\\n          </div>\\n        \");\n        var popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(popupContent);\n\n        // Attach the popup to the marker\n        marker.setPopup(popup);\n        _this10.parks.push(marker);\n      });\n    },\n    addPOI: function addPOI() {\n      var _this11 = this;\n      var coordinates = [[-81.6852949, 41.4958921], [-81.6995481, 41.5060535], [-81.6880574, 41.4965474], [-81.7037735, 41.4986853], [-81.6900132, 41.4991465], [-81.6991611, 41.5005667], [-81.698024, 41.492705], [-81.7045326, 41.4844029], [-81.7138946, 41.4991564], [-81.7013211, 41.4966056]\n\n      // Replace with your desired coordinates\n      // Add more coordinates here\n      ];\n\n      console.log(\"Coordinates:\", coordinates);\n\n      // Remove existing markers and popups\n      this.removeMarkersAndPopups();\n      this.map.flyTo({\n        center: [-81.6852949, 41.490645],\n        zoom: 15\n      });\n      // Add markers for each coordinate\n      coordinates.forEach(function (coord, index) {\n        var marker = new mapboxgl.Marker({\n          color: \"blue\"\n        }).setLngLat(coord).addTo(_this11.map);\n\n        // Get the custom text for this marker\n        var popupContent = \"\\n          <div>\\n            <p>\".concat(_this11.popupTexts[index], \"</p>\\n            <img src=\\\"https://example.com/your-image-url.jpg\\\" alt=\\\"Image\\\" width=\\\"200\\\"/>\\n            <button id=\\\"checkInBtn\").concat(index, \"\\\" class=\\\"check-in-button\\\">Check-In</button>\\n          </div>\\n        \");\n        var popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(popupContent);\n\n        // Attach the popup to the marker\n        marker.setPopup(popup);\n        _this11.markers.push(marker);\n      });\n    },\n    addCoffee: function addCoffee() {\n      var _this12 = this;\n      var coordinates = [[-81.7147703, 41.4801392], [-81.7089057, 41.4841798], [-81.6895095, 41.4798316], [-81.6909685, 41.5007669], [-81.7041667, 41.4841667], [-81.6746106, 41.5040237], [-81.6882329, 41.5015518], [-81.7104054, 41.489191], [-81.6994828, 41.4993248]\n\n      // Replace with your desired coordinates\n      // Add more coordinates here\n      ];\n\n      console.log(\"Coordinates:\", coordinates);\n\n      // Remove existing markers and popups\n      this.removeMarkersAndPopups();\n      this.map.flyTo({\n        center: [-81.6852949, 41.490645],\n        zoom: 15\n      });\n      // Add markers for each coordinate\n      coordinates.forEach(function (coord, index) {\n        var marker = new mapboxgl.Marker({\n          color: \"blue\"\n        }).setLngLat(coord).addTo(_this12.map);\n\n        // Get the custom text for this marker\n        var popupContent = \"\\n          <div>\\n            <p>\".concat(_this12.popupTexts[index], \"</p>\\n            <img src=\\\"https://example.com/your-image-url.jpg\\\" alt=\\\"Image\\\" width=\\\"200\\\"/>\\n            <button id=\\\"checkInBtn\").concat(index, \"\\\" class=\\\"check-in-button\\\">Check-In</button>\\n          </div>\\n        \");\n        var popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(popupContent);\n\n        // Attach the popup to the marker\n        marker.setPopup(popup);\n        _this12.coffee.push(marker);\n      });\n    },\n    removeMarkersAndPopups: function removeMarkersAndPopups() {\n      this.markers.forEach(function (marker) {\n        marker.remove();\n      });\n      this.stadiums.forEach(function (poi) {\n        poi.remove();\n      });\n      this.Bars.forEach(function (poi) {\n        poi.remove();\n      });\n      this.parks.forEach(function (poi) {\n        poi.remove();\n      });\n      this.poi.forEach(function (poi) {\n        poi.remove();\n      });\n      this.coffee.forEach(function (poi) {\n        poi.remove();\n      });\n      this.parks = [];\n      this.Bars = [];\n      this.poi = [];\n      this.markers = [];\n      this.coffee = [];\n    }\n  },\n  mounted: function mounted() {\n    var _this13 = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      var lat = position.coords.latitude;\n      var lng = position.coords.longitude;\n      _this13.userLocation = {\n        lat: lat,\n        lng: lng\n      };\n      _this13.initMap();\n      _this13.map.flyTo({\n        center: [lng, lat],\n        zoom: 15\n      });\n      _this13.addMapMarker({\n        lng: lng,\n        lat: lat\n      });\n      _this13.getDirections();\n      _this13.search();\n      _this13.navigation();\n      _this13.geoLocate();\n      _this13.fetchDataFromAPI();\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AAEA;EACAC;IACA;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC,aACA,6CACA;MACA;MAAA,CACA;;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;QAAA;QACA,+CACA;UACA;QACA,EACA;MACA;IACA;EACA;EACAC;IACAC;MACA;MACA;QACAC;QACAC;QACAC;QACAC;MACA;MAEA;IACA;IACAC;MAAA;MACA;QACA;MACA;IACA;IACAC;MACA,2CACAC,wCACAA,uCACA;IACA;IACAC;MACA;QAAAC;MAAA,GACAC,kBACAC;MACA;IACA;IACAC;MACA;QAAA;MAAA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MAAA;MACA;MACAC;QACA;QACA;QACA;;QAEA;QACA;UAAAlB;UAAAD;QAAA;;QAEA;QACA;UAAAO;UAAAC;QAAA;;QAEA;QACA;QACA;;QAEA;QACA;UAAAP;UAAAD;QAAA;MACA;IACA;IACAoB;MACA;MACA;QACAC;QACAC;QACAC;MACA;MACAC;MACA;IACA;IACAC;MACA;MACA;MACA;QAAAC;MAAA;MACA;MACA;MAEA;MACA5B;MACAA;QACA6B;QACAC;QACAC;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA;IACA;IACAC;MACA;MACA;IACA;IACAC;MAAA;MACA;MACA;QACAC;UACAC;QACA;QACAC;QACAC;MACA;MACAC;QACA;QACA;QACA;UAAAnC;UAAAD;QAAA;MACA;MACA;IACA;IAEAqC;MAAA;MACA;MAEAC;;MAEA;MACA;MACA;QAAA/B;QAAAC;MAAA;;MAEA;MACAlB;QACA;UAAAuB;QAAA,GACAC,iBACAC;;QAEA;QACA,uEAEA,6PAGAwB,4FAEA;QAEA;UAAAC;QAAA,GACAC;;QAEA;QACAC;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;MACA;IACA;IAEAC;MAAA;MACA,mBACA,2BACA,2BACA,2BACA,yBACA;MACA;MACA;MAAA,CACA;;MAEA;MACA;MACAL;;MAEA;MACA;MACA;QAAA/B;QAAAC;MAAA;MACA;MACAlB;QACA;UAAAuB;QAAA,GACAC,iBACAC;;QAEA;QACA,+DAEA,6KAEAwB,oFAEA;QAEA;UAAAC;QAAA,GACAC;;QAEA;QACAC;QAEA;MACA;IACA;IACAE;MAAA;MACA;MACAC,0BACAC;QACA;QACA;MACA,WACA;QACAR;MACA;IACA;IACAS;MAAA;MACA;MACAF,yBACAC;QACA;QACA;MACA,WACA;QACAR;MACA;IACA;IAQAU;MAAA;MACA;QACA;UAAAC;UAAAC;;QAEA;QACA;UAAArC;QAAA,GACAC,iDACAC;;QAEA;QACA,2DAEAoC,4CACAF,oEACA,4FAEA;QAEA;UAAAT;QAAA,GACAC;;QAEA;QACAjD;MACA;IACA;IACA4D;MAAA;MACA,mBACA,2BACA;MACA;MAAA,CACA;;MAEA;MACAd;;MAEA;MACA;MACA;QAAA/B;QAAAC;MAAA;MACA;MACAlB;QACA;UAAAuB;QAAA,GACAC,iBACAC;;QAEA;QACA,+DAEA,8KAEAwB,oFAEA;QAEA;UAAAC;QAAA,GACAC;;QAEA;QACAC;QAEA;MAEA;IACA;IACAW;MAAA;MACA,mBACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,2BACA;;MAEA;MACA;MAAA,CACA;;MAEAf;;MAEA;MACA;MACA;QAAA/B;QAAAC;MAAA;MACA;MACAlB;QACA;UAAAuB;QAAA,GACAC,iBACAC;;QAEA;QACA,+DAEA,8KAEAwB,oFAEA;QAEA;UAAAC;QAAA,GACAC;;QAEA;QACAC;QAEA;MACA;IACA;IACAY;MAAA;MACA,mBACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,0BACA;;MAEA;MACA;MAAA,CACA;;MAEAhB;;MAEA;MACA;MACA;QAAA/B;QAAAC;MAAA;MACA;MACAlB;QACA;UAAAuB;QAAA,GACAC,iBACAC;;QAEA;QACA,+DAEA,8KAEAwB,oFAEA;QAEA;UAAAC;QAAA,GACAC;;QAEA;QACAC;QAEA;MACA;IACA;IACAa;MACA;QACAb;MAEA;MACA;QACA/C;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;MACA;MACA;MACA;MACA;IAEA;EACA;EACA6D;IAAA;IACArC;MACA;MACA;MACA;QAAAnB;QAAAC;MAAA;MACA;MACA;QAAAM;QAAAC;MAAA;MACA;QAAAP;QAAAD;MAAA;MAEA;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["mapboxgl","data","map","query","location","type","coordinates","markers","stadiums","Bars","parks","poi","coffee","popupTexts","searchBox","userLocation","lat","lng","created","methods","initMap","container","style","center","zoom","addMapClickListener","setLocationCoordinates","Math","addMapMarker","color","setLngLat","addTo","removeMapMarkers","setLocation","requestLocation","navigator","getDirections","accessToken","unit","profile","directions","search","units","language","country","bbox","navigation","geoLocate","positionOptions","enableHighAccuracy","trackUserLocation","showUserLocation","geolocateControl","addSports","console","index","offset","setHTML","marker","addBars","fetchDataFromAPI","service","then","fetchDataFroStadiums","addMarkersAndPopups","locationLatitude","locationLongitude","locationName","addParks","addPOI","addCoffee","removeMarkersAndPopups","mounted"],"sourceRoot":"src/components","sources":["NewMapBox.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    \r\n    <!-- <input type=\"text\" name=\"location\" :value=\"location.coordinates\" disabled /> -->\r\n    <button @click=\"addMarkersAndPopups\">dkkdksakdlakd;kasdksakdlkaslkdkas;da</button><button @click=\"addCoffee\">POI</button><button @click=\"addParks\">parks</button><button  @click=\"removeMarkersAndPopups\">Remove Markers</button> <button @click=\"addBars\">BAR</button>\r\n    <div id=\"map\"></div>\r\n    <!-- <button class=\"btn\" @click=\"requestLocation\">Get Current Location</button>-->\r\n    \r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { MapboxSearchBox } from \"@mapbox/search-js-web\";\r\nimport * as turf from \"@turf/turf\";\r\nimport MapboxDirections from \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions\";\r\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\r\nimport service from '../services/locationService.js'\r\n// const mapboxgl = require(\"mapbox-gl/dist/mapbox-gl.js\");\r\n// Retrieve API key from environment variables\r\nmapboxgl.accessToken = process.env.VUE_APP_MAPBOX_KEY;\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n      query: \"\",\r\n      location: {\r\n        type: \"Point\",\r\n        coordinates: [],\r\n      },\r\n      markers: [],\r\n      stadiums: [],\r\n      Bars: [],\r\n      parks: [],\r\n      poi: [],\r\n      coffee: [],\r\n       popupTexts: [\r\n        \"This is the first marker's www.google.com\",\r\n        \"This is the second marker's custom text.\",\r\n        // Add more custom texts here, one for each marker\r\n      ],\r\n      searchBox: null,\r\n      userLocation: {\r\n        lat: 0,\r\n        lng: 0,\r\n      },\r\n      created(){\r\n        this.stadiums = service.getAllLocations().then(\r\n          (rep) =>{ \r\n            this.stadiums = rep.data;\r\n          }\r\n        )\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // Create map object\r\n      this.map = new mapboxgl.Map({\r\n        container: \"map\",\r\n        style: \"mapbox://styles/walkcle216/cln4qqvn306wt01qi05mi9h14\",\r\n        center: [this.userLocation.lng, this.userLocation.lat],\r\n        zoom: 15,\r\n      });\r\n\r\n      this.addMapClickListener();\r\n    },\r\n    addMapClickListener() {\r\n      this.map.on(\"click\", (e) => {\r\n        this.setLocation(e.lngLat);\r\n      });\r\n    },\r\n    setLocationCoordinates(lngLat) {\r\n      this.setLocationCoordinates.coordinates = [\r\n        Math.round(lngLat.lng * 10000) / 10000,\r\n        Math.round(lngLat.lat * 10000) / 10000,\r\n      ];\r\n    },\r\n    addMapMarker(lngLat) {\r\n      const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n        .setLngLat(lngLat)\r\n        .addTo(this.map);\r\n      this.markers.push(marker);\r\n    },\r\n    removeMapMarkers() {\r\n      this.markers.forEach((marker) => marker.remove());\r\n      this.markers = [];\r\n    },\r\n    setLocation(lngLat) {\r\n      this.removeMapMarkers();\r\n      this.addMapMarker(lngLat);\r\n      this.setLocationCoordinates(lngLat);\r\n    },\r\n    requestLocation() {\r\n      // Request to get the user's current location\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        // get the latitude and longitude returned\r\n        const lat = position.coords.latitude;\r\n        const lng = position.coords.longitude;\r\n\r\n        // set location data\r\n        this.setLocation({ lng, lat });\r\n\r\n        // move the ap to show the location\r\n        this.map.flyTo({ center: [lng, lat], zoom: 15 });\r\n\r\n        // Store user location\r\n        this.userLocation.lat = lat;\r\n        this.userLocation.lng = lng;\r\n\r\n        // Add a marker for the current location\r\n        this.addMapMarker({ lng, lat });\r\n      });\r\n    },\r\n    getDirections() {\r\n      // Set up Mapbox Directions control\r\n      const directions = new MapboxDirections({\r\n        accessToken: mapboxgl.accessToken,\r\n        unit: \"imperial\",\r\n        profile: \"mapbox/walking\",\r\n      });\r\n      directions.setOrigin([this.userLocation.lng, this.userLocation.lat]);\r\n      this.map.addControl(directions, \"bottom-left\");\r\n    },\r\n    search() {\r\n      // Set up Mapbox Search Box\r\n      const point = turf.point([this.userLocation.lng, this.userLocation.lat]);\r\n      const options = { units: \"miles\" };\r\n      const radius = 5; // 1 mile\r\n      const bbox = turf.bbox(turf.buffer(point, radius, options));\r\n\r\n      const searchBox = new MapboxSearchBox();\r\n      searchBox.accessToken = mapboxgl.accessToken;\r\n      searchBox.options = {\r\n        language: \"en\",\r\n        country: \"us\",\r\n        bbox: bbox,\r\n      };\r\n\r\n      // searchBox.on('result', (result) => {\r\n      //     const { lng, lat } = result.result.geometry.coordinates;\r\n      //     this.addMapMarker({ lng, lat });\r\n      //     this.getDirections({ lng, lat });\r\n      // });\r\n\r\n      this.map.addControl(searchBox);\r\n    },\r\n    navigation() {\r\n      // Adds basic zoom and rotation control\r\n      this.map.addControl(new mapboxgl.NavigationControl());\r\n    },\r\n    geoLocate() {\r\n      // Adds Location control\r\n      const geolocateControl = new mapboxgl.GeolocateControl({\r\n        positionOptions: {\r\n          enableHighAccuracy: true,\r\n        },\r\n        trackUserLocation: true,\r\n        showUserLocation: true,\r\n      });\r\n      geolocateControl.on(\"geolocate\", (e) => {\r\n        const lat = e.coords.latitude;\r\n        const lng = e.coords.longitude;\r\n        this.addMapMarker({ lng, lat });\r\n      });\r\n      this.map.addControl(geolocateControl);\r\n    },\r\n     \r\n     addSports() {\r\n      const coordinates = this.stadiums.longitude\r\n\r\n      console.log(\"Coordinates:\", coordinates);\r\n\r\n      // Remove existing markers and popups\r\n      this.removeMarkersAndPopups();\r\n      this.map.flyTo({ center: [-81.6852949, 41.490645], zoom: 15 });\r\n\r\n      // Add markers for each coordinate\r\n      coordinates.forEach((coord, index) => {\r\n        const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n          .setLngLat(coord)\r\n          .addTo(this.map);\r\n\r\n        // Create a popup with custom content\r\n                const popupContent = `\r\n              <div>\r\n                <p>${this.popupTexts[index]}</p>\r\n                <a href=\"https://www.google.com\" target=\"_blank\">Visit Google</a>\r\n                <img src=\"@/assets/logo/small.png\" alt=\"Image\" width=\"200\"/>\r\n                <button id=\"checkInBtn${index}\" class=\"check-in-button\">Check-In</button>\r\n              </div>\r\n            `;\r\n\r\n        const popup = new mapboxgl.Popup({ offset: 25 })\r\n          .setHTML(popupContent);\r\n\r\n        // Attach the popup to the marker\r\n        marker.setPopup(popup);\r\n\r\n        // Attach a click event handler to the check-in button\r\n        // const checkInBtn = document.getElementById(`checkInBtn${index}`);\r\n        // checkInBtn.addEventListener(\"click\", () => {\r\n        //   // Handle the check-in action here (e.g., show a confirmation dialog)\r\n        //   alert(\"Checked in!\");\r\n        // });\r\n\r\n        this.stadiums.push(marker);\r\n      });\r\n    },\r\n    \r\n    addBars() {\r\n  const coordinates = [\r\n    [-81.7037735,41.4986853],\r\n    [-81.6900132,41.4991465],\r\n    [-81.6991611,41.5005667],\r\n    [-81.698024,41.492705],\r\n    [-81.7045326,41.4844029]\r\n     // Replace with your desired coordinates\r\n    // Add more coordinates here\r\n  ];\r\n\r\n  // Debugging: Log the coordinates array\r\n   // Debugging: Log the coordinates array\r\n      console.log(\"Coordinates:\", coordinates);\r\n\r\n      // Remove existing markers and popups\r\n      this.removeMarkersAndPopups();\r\n      this.map.flyTo({ center: [-81.6852949, 41.490645], zoom: 15 });\r\n      // Add markers for each coordinate\r\n      coordinates.forEach((coord, index) => {\r\n        const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n          .setLngLat(coord)\r\n          .addTo(this.map);\r\n\r\n        // Create a popup with custom content\r\n        const popupContent = `\r\n          <div>\r\n            <p>${this.popupTexts[index]}</p>\r\n            <img src=\"https://example.com/your-image-url.jpg\" alt=\"Image\" width=\"200\"/>\r\n            <button id=\"checkInBtn${index}\" class=\"check-in-button\">Check-In</button>\r\n          </div>\r\n        `;\r\n\r\n        const popup = new mapboxgl.Popup({ offset: 25 })\r\n          .setHTML(popupContent);\r\n\r\n        // Attach the popup to the marker\r\n        marker.setPopup(popup);\r\n\r\n        this.markers.push(marker);\r\n      });\r\n    },\r\n    fetchDataFromAPI() {\r\n      // Assuming 'service.getAllLocations()' is an asynchronous function that returns a promise\r\n      service.getAllLocations()\r\n        .then((response) => {\r\n          // Assuming the response contains an array of locations\r\n          this.locations = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching locations:', error);\r\n        });\r\n    },\r\n   fetchDataFroStadiums() {\r\n      // Assuming 'service.getAllLocations()' is an asynchronous function that returns a promise\r\n      service.getAllStadiums()\r\n        .then((response) => {\r\n          // Assuming the response contains an array of locations\r\n          this.stadium = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching locations:', error);\r\n        });\r\n    },\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n    addMarkersAndPopups() {\r\n    this.locations.forEach((location) => {\r\n      const { locationName, locationLatitude, locationLongitude } = location;\r\n\r\n      // Create a marker at the specified location\r\n      const stadiums = new mapboxgl.Marker({ color: \"blue\" })\r\n        .setLngLat([locationLongitude, locationLatitude])\r\n        .addTo(this.map);\r\n\r\n      // Create a popup with custom content\r\n      const popupContent = `\r\n        <div>\r\n          <p>${locationName}</p>\r\n          <p>${locationLatitude}</p>\r\n          <button id=\"checkInBtn${this.locationId}\" class=\"check-in-button\">Check-In</button>\r\n        </div>\r\n      `;\r\n\r\n      const popup = new mapboxgl.Popup({ offset: 25 })\r\n        .setHTML(popupContent);\r\n\r\n      // Attach the popup to the marker\r\n      stadiums.setPopup(popup);\r\n    });\r\n  },\r\n    addParks() {\r\n      const coordinates = [\r\n        [-81.7138946, 41.4991564],\r\n        [-81.7013211, 41.4966056],\r\n        // Add more coordinates here\r\n      ];\r\n\r\n      // Debugging: Log the coordinates array\r\n      console.log(\"Coordinates:\", coordinates);\r\n\r\n      // Remove existing markers and popups\r\n      this.removeMarkersAndPopups();\r\n      this.map.flyTo({ center: [-81.6852949, 41.490645], zoom: 15 });\r\n      // Add markers for each coordinate\r\n      coordinates.forEach((coord, index) => {\r\n        const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n          .setLngLat(coord)\r\n          .addTo(this.map);\r\n\r\n        // Get the custom text for this marker\r\n       const popupContent = `\r\n          <div>\r\n            <p>${this.popupTexts[index]}</p>\r\n            <img src=\"https://example.com/your-image-url.jpg\" alt=\"Image\" width=\"200\"/>\r\n            <button id=\"checkInBtn${index}\" class=\"check-in-button\">Check-In</button>\r\n          </div>\r\n        `;\r\n\r\n        const popup = new mapboxgl.Popup({ offset: 25 })\r\n          .setHTML(popupContent);\r\n\r\n        // Attach the popup to the marker\r\n        marker.setPopup(popup);\r\n\r\n        this.parks.push(marker);\r\n        \r\n      });\r\n    },\r\n    addPOI() {\r\n  const coordinates = [\r\n    [-81.6852949,41.4958921],\r\n    [-81.6995481,41.5060535],\r\n    [-81.6880574,41.4965474],\r\n     [-81.7037735,41.4986853],\r\n    [-81.6900132,41.4991465],\r\n    [-81.6991611,41.5005667],\r\n    [-81.698024,41.492705],\r\n    [-81.7045326,41.4844029],\r\n    [-81.7138946,41.4991564],\r\n    [-81.7013211,41.4966056],\r\n\r\n     // Replace with your desired coordinates\r\n    // Add more coordinates here\r\n  ];\r\n\r\n console.log(\"Coordinates:\", coordinates);\r\n\r\n      // Remove existing markers and popups\r\n      this.removeMarkersAndPopups();\r\n      this.map.flyTo({ center: [-81.6852949, 41.490645], zoom: 15 });\r\n      // Add markers for each coordinate\r\n      coordinates.forEach((coord, index) => {\r\n        const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n          .setLngLat(coord)\r\n          .addTo(this.map);\r\n\r\n        // Get the custom text for this marker\r\n        const popupContent = `\r\n          <div>\r\n            <p>${this.popupTexts[index]}</p>\r\n            <img src=\"https://example.com/your-image-url.jpg\" alt=\"Image\" width=\"200\"/>\r\n            <button id=\"checkInBtn${index}\" class=\"check-in-button\">Check-In</button>\r\n          </div>\r\n        `;\r\n\r\n        const popup = new mapboxgl.Popup({ offset: 25 })\r\n          .setHTML(popupContent);\r\n\r\n        // Attach the popup to the marker\r\n        marker.setPopup(popup);\r\n\r\n        this.markers.push(marker);\r\n      });\r\n    },\r\n    addCoffee() {\r\n  const coordinates = [\r\n    [-81.7147703,41.4801392],\r\n    [-81.7089057,41.4841798],\r\n    [-81.6895095,41.4798316],\r\n    [-81.6909685,41.5007669],\r\n    [-81.7041667,41.4841667],\r\n    [-81.6746106,41.5040237],\r\n    [-81.6882329,41.5015518],\r\n    [-81.7104054,41.489191],\r\n    [-81.6994828,41.4993248],\r\n\r\n     // Replace with your desired coordinates\r\n    // Add more coordinates here\r\n  ];\r\n\r\n console.log(\"Coordinates:\", coordinates);\r\n\r\n      // Remove existing markers and popups\r\n      this.removeMarkersAndPopups();\r\n      this.map.flyTo({ center: [-81.6852949, 41.490645], zoom: 15 });\r\n      // Add markers for each coordinate\r\n      coordinates.forEach((coord, index) => {\r\n        const marker = new mapboxgl.Marker({ color: \"blue\" })\r\n          .setLngLat(coord)\r\n          .addTo(this.map);\r\n\r\n        // Get the custom text for this marker\r\n        const popupContent = `\r\n          <div>\r\n            <p>${this.popupTexts[index]}</p>\r\n            <img src=\"https://example.com/your-image-url.jpg\" alt=\"Image\" width=\"200\"/>\r\n            <button id=\"checkInBtn${index}\" class=\"check-in-button\">Check-In</button>\r\n          </div>\r\n        `;\r\n\r\n        const popup = new mapboxgl.Popup({ offset: 25 })\r\n          .setHTML(popupContent);\r\n\r\n        // Attach the popup to the marker\r\n        marker.setPopup(popup);\r\n\r\n        this.coffee.push(marker);\r\n      });\r\n    },\r\n    removeMarkersAndPopups() {\r\n  this.markers.forEach((marker) => {\r\n    marker.remove();\r\n    \r\n  });\r\n  this.stadiums.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.Bars.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.parks.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.poi.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.coffee.forEach((poi) =>{\r\n    poi.remove();\r\n  })\r\n  this.parks = [];\r\n  this.Bars = [];\r\n  this.poi = [];\r\n  this.markers = [];\r\n  this.coffee = [];\r\n  \r\n    },\r\n  },\r\n  mounted() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const lat = position.coords.latitude;\r\n      const lng = position.coords.longitude;\r\n      this.userLocation = { lat, lng };\r\n      this.initMap();\r\n      this.map.flyTo({ center: [lng, lat], zoom: 15 });\r\n      this.addMapMarker({ lng, lat });\r\n\r\n      this.getDirections();\r\n      this.search();\r\n      this.navigation();\r\n      this.geoLocate();\r\n      this.fetchDataFromAPI(); \r\n    });\r\n  },\r\n};\r\n</script>\r\n  \r\n<style scoped>\r\n#map {\r\n  width: 100vw;\r\n  height: 100%;\r\n}\r\n\r\n.mapbox-directions-instructions {\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  font-family: \"Urbanist\", sans-serif;\r\n  font-size: 14px;\r\n  color: #333;\r\n}\r\n\r\n.mapbox-directions-route-summary {\r\n  font-family: \"Urbanist\", sans-serif;\r\n}\r\n\r\n.mapbox-directions-step {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.mapbox-directions-step-number {\r\n  font-weight: bold;\r\n  color: #0078d4;\r\n}\r\n\r\n.mapbox-directions-step-text {\r\n  color: #000000;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}